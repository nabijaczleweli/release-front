/*!
 * release-front <https://github.com/nabijaczleweli/release-front>
 * Copyright 2018 nabijaczleweli <https://nabijaczleweli.xyz>
 * Available under MIT license <https://opensource.org/licenses/mit>
 */
(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["./assets", "./platform-detect", "./url"], factory);
	} else if (typeof exports !== "undefined") {
		factory(require("./assets"), require("./platform-detect"), require("./url"));
	} else {
		var mod = {
			exports: {}
		};
		factory(global.assets, global.platformDetect, global.url);
		global.mainDisplay = mod.exports;
	}
})(this, function (_assets, _platformDetect, _url) {
	"use strict";

	window.addEventListener("load", function () {
		var DOWNLOAD_BUTTON = document.getElementById("main-button");
		var LOGO = document.getElementById("main-logo");

		var REPO_NAME_CONTAINERS = document.getElementsByClassName("main-repo-name");
		var LATEST_LINK_CONTAINERS = document.getElementsByClassName("main-latest-link");
		var VERSION_CONTAINERS = document.getElementsByClassName("main-version");
		var PLATFORM_CONTAINERS = document.getElementsByClassName("main-platform");

		var slug = (0, _url.extract_slug)(window.location.search);

		var platform = _platformDetect.Platform.from_platform();
		Array.from(PLATFORM_CONTAINERS).forEach(function (_) {
			return _.innerText = _platformDetect.Platform.name(platform);
		});

		var slug_name = (0, _url.full_name)(slug);
		if (slug_name) Array.from(REPO_NAME_CONTAINERS).forEach(function (_) {
			return _.innerText = slug_name;
		});

		(0, _url.latest_release)(slug, function (status, release) {
			if (status < 200 || status >= 300) return;

			if (release.html_url) Array.from(LATEST_LINK_CONTAINERS).forEach(function (_) {
				return _.href = release.html_url;
			});

			if (release.tag_name) {
				Array.from(VERSION_CONTAINERS).forEach(function (_) {
					return _.innerText = release.tag_name;
				});
				(0, _url.find_logo)(slug, release.tag_name, function (logo_url) {
					if (logo_url) {
						LOGO.src = logo_url;
						LOGO.alt = slug_name + " logo";
						LOGO.title = LOGO.alt;
						LOGO.classList.remove("hidden");
					}
				});

				var ranked_assets = (0, _assets.rank_assets)(slug.repo, release.tag_name, release.assets, platform);
				ranked_assets.sort(function (lhs, rhs) {
					return rhs.score - lhs.score;
				});
				if (ranked_assets.length === 0) {
					DOWNLOAD_BUTTON.innerText = "No assets found";
					DOWNLOAD_BUTTON.href = release.html_url;
				} else DOWNLOAD_BUTTON.href = ranked_assets[0].data.browser_download_url;
			}
		});
	});
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9qcy9tYWluLWRpc3BsYXkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBNEJBLFFBQU8sZ0JBQVAsQ0FBd0IsTUFBeEIsRUFBZ0MsWUFBTTtBQUNyQyxNQUFNLGtCQUFrQixTQUFTLGNBQVQsQ0FBd0IsYUFBeEIsQ0FBeEI7QUFDQSxNQUFNLE9BQWtCLFNBQVMsY0FBVCxDQUF3QixXQUF4QixDQUF4Qjs7QUFFQSxNQUFNLHVCQUF5QixTQUFTLHNCQUFULENBQWdDLGdCQUFoQyxDQUEvQjtBQUNBLE1BQU0seUJBQXlCLFNBQVMsc0JBQVQsQ0FBZ0Msa0JBQWhDLENBQS9CO0FBQ0EsTUFBTSxxQkFBeUIsU0FBUyxzQkFBVCxDQUFnQyxjQUFoQyxDQUEvQjtBQUNBLE1BQU0sc0JBQXlCLFNBQVMsc0JBQVQsQ0FBZ0MsZUFBaEMsQ0FBL0I7O0FBRUEsTUFBSSxPQUFPLHVCQUFhLE9BQU8sUUFBUCxDQUFnQixNQUE3QixDQUFYOztBQUVBLE1BQUksV0FBVyx5QkFBUyxhQUFULEVBQWY7QUFDQSxRQUFNLElBQU4sQ0FBVyxtQkFBWCxFQUFnQyxPQUFoQyxDQUF3QztBQUFBLFVBQUssRUFBRSxTQUFGLEdBQWMseUJBQVMsSUFBVCxDQUFjLFFBQWQsQ0FBbkI7QUFBQSxHQUF4Qzs7QUFFQSxNQUFJLFlBQVksb0JBQVUsSUFBVixDQUFoQjtBQUNBLE1BQUcsU0FBSCxFQUNDLE1BQU0sSUFBTixDQUFXLG9CQUFYLEVBQWlDLE9BQWpDLENBQXlDO0FBQUEsVUFBSyxFQUFFLFNBQUYsR0FBYyxTQUFuQjtBQUFBLEdBQXpDOztBQUVELDJCQUFlLElBQWYsRUFBcUIsVUFBQyxNQUFELEVBQVMsT0FBVCxFQUFxQjtBQUN6QyxPQUFHLFNBQVMsR0FBVCxJQUFnQixVQUFVLEdBQTdCLEVBRUM7O0FBRUQsT0FBRyxRQUFRLFFBQVgsRUFDQyxNQUFNLElBQU4sQ0FBVyxzQkFBWCxFQUFtQyxPQUFuQyxDQUEyQztBQUFBLFdBQUssRUFBRSxJQUFGLEdBQVMsUUFBUSxRQUF0QjtBQUFBLElBQTNDOztBQUVELE9BQUcsUUFBUSxRQUFYLEVBQXFCO0FBQ3BCLFVBQU0sSUFBTixDQUFXLGtCQUFYLEVBQStCLE9BQS9CLENBQXVDO0FBQUEsWUFBSyxFQUFFLFNBQUYsR0FBYyxRQUFRLFFBQTNCO0FBQUEsS0FBdkM7QUFDQSx3QkFBVSxJQUFWLEVBQWdCLFFBQVEsUUFBeEIsRUFBa0Msb0JBQVk7QUFDN0MsU0FBRyxRQUFILEVBQWE7QUFDWixXQUFLLEdBQUwsR0FBYSxRQUFiO0FBQ0EsV0FBSyxHQUFMLEdBQWdCLFNBQWhCO0FBQ0EsV0FBSyxLQUFMLEdBQWEsS0FBSyxHQUFsQjtBQUNBLFdBQUssU0FBTCxDQUFlLE1BQWYsQ0FBc0IsUUFBdEI7QUFDQTtBQUNELEtBUEQ7O0FBU0EsUUFBSSxnQkFBZ0IseUJBQVksS0FBSyxJQUFqQixFQUF1QixRQUFRLFFBQS9CLEVBQXlDLFFBQVEsTUFBakQsRUFBeUQsUUFBekQsQ0FBcEI7QUFDQSxrQkFBYyxJQUFkLENBQW1CLFVBQUMsR0FBRCxFQUFNLEdBQU47QUFBQSxZQUFjLElBQUksS0FBSixHQUFZLElBQUksS0FBOUI7QUFBQSxLQUFuQjtBQUNBLFFBQUcsY0FBYyxNQUFkLEtBQXlCLENBQTVCLEVBQStCO0FBQzlCLHFCQUFnQixTQUFoQixHQUE0QixpQkFBNUI7QUFDQSxxQkFBZ0IsSUFBaEIsR0FBNEIsUUFBUSxRQUFwQztBQUNBLEtBSEQsTUFJQyxnQkFBZ0IsSUFBaEIsR0FBdUIsY0FBYyxDQUFkLEVBQWlCLElBQWpCLENBQXNCLG9CQUE3QztBQUNEO0FBQ0QsR0EzQkQ7QUE0QkEsRUE5Q0QiLCJmaWxlIjoic3Rkb3V0Iiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDE4IG5hYmlqYWN6bGV3ZWxpXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuLy8gY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4vLyBTT0ZUV0FSRS5cblxuXG5pbXBvcnQge3JhbmtfYXNzZXRzfSBmcm9tIFwiLi9hc3NldHNcIjtcbmltcG9ydCB7UGxhdGZvcm19IGZyb20gXCIuL3BsYXRmb3JtLWRldGVjdFwiO1xuaW1wb3J0IHtleHRyYWN0X3NsdWcsIGZpbmRfbG9nbywgZnVsbF9uYW1lLCBsYXRlc3RfcmVsZWFzZX0gZnJvbSBcIi4vdXJsXCI7XG5cblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcblx0Y29uc3QgRE9XTkxPQURfQlVUVE9OID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWluLWJ1dHRvblwiKTtcblx0Y29uc3QgTE9HTyAgICAgICAgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWluLWxvZ29cIik7XG5cblx0Y29uc3QgUkVQT19OQU1FX0NPTlRBSU5FUlMgICA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJtYWluLXJlcG8tbmFtZVwiKTtcblx0Y29uc3QgTEFURVNUX0xJTktfQ09OVEFJTkVSUyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJtYWluLWxhdGVzdC1saW5rXCIpO1xuXHRjb25zdCBWRVJTSU9OX0NPTlRBSU5FUlMgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIm1haW4tdmVyc2lvblwiKTtcblx0Y29uc3QgUExBVEZPUk1fQ09OVEFJTkVSUyAgICA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJtYWluLXBsYXRmb3JtXCIpO1xuXG5cdGxldCBzbHVnID0gZXh0cmFjdF9zbHVnKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuXG5cdGxldCBwbGF0Zm9ybSA9IFBsYXRmb3JtLmZyb21fcGxhdGZvcm0oKTtcblx0QXJyYXkuZnJvbShQTEFURk9STV9DT05UQUlORVJTKS5mb3JFYWNoKF8gPT4gXy5pbm5lclRleHQgPSBQbGF0Zm9ybS5uYW1lKHBsYXRmb3JtKSk7XG5cblx0bGV0IHNsdWdfbmFtZSA9IGZ1bGxfbmFtZShzbHVnKTtcblx0aWYoc2x1Z19uYW1lKVxuXHRcdEFycmF5LmZyb20oUkVQT19OQU1FX0NPTlRBSU5FUlMpLmZvckVhY2goXyA9PiBfLmlubmVyVGV4dCA9IHNsdWdfbmFtZSk7XG5cblx0bGF0ZXN0X3JlbGVhc2Uoc2x1ZywgKHN0YXR1cywgcmVsZWFzZSkgPT4ge1xuXHRcdGlmKHN0YXR1cyA8IDIwMCB8fCBzdGF0dXMgPj0gMzAwKVxuXHRcdFx0Ly8gVE9ETzogcHJlc2VudCBlcnJvciAoY2hhbmdlIGJ1dGFuIGNvbG91ciAmL29yIHRleHQ/KVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0aWYocmVsZWFzZS5odG1sX3VybClcblx0XHRcdEFycmF5LmZyb20oTEFURVNUX0xJTktfQ09OVEFJTkVSUykuZm9yRWFjaChfID0+IF8uaHJlZiA9IHJlbGVhc2UuaHRtbF91cmwpO1xuXG5cdFx0aWYocmVsZWFzZS50YWdfbmFtZSkge1xuXHRcdFx0QXJyYXkuZnJvbShWRVJTSU9OX0NPTlRBSU5FUlMpLmZvckVhY2goXyA9PiBfLmlubmVyVGV4dCA9IHJlbGVhc2UudGFnX25hbWUpO1xuXHRcdFx0ZmluZF9sb2dvKHNsdWcsIHJlbGVhc2UudGFnX25hbWUsIGxvZ29fdXJsID0+IHtcblx0XHRcdFx0aWYobG9nb191cmwpIHtcblx0XHRcdFx0XHRMT0dPLnNyYyAgID0gbG9nb191cmw7XG5cdFx0XHRcdFx0TE9HTy5hbHQgICA9IGAke3NsdWdfbmFtZX0gbG9nb2A7XG5cdFx0XHRcdFx0TE9HTy50aXRsZSA9IExPR08uYWx0O1xuXHRcdFx0XHRcdExPR08uY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGxldCByYW5rZWRfYXNzZXRzID0gcmFua19hc3NldHMoc2x1Zy5yZXBvLCByZWxlYXNlLnRhZ19uYW1lLCByZWxlYXNlLmFzc2V0cywgcGxhdGZvcm0pO1xuXHRcdFx0cmFua2VkX2Fzc2V0cy5zb3J0KChsaHMsIHJocykgPT4gcmhzLnNjb3JlIC0gbGhzLnNjb3JlKTsgIC8vIGJpZ2dlc3QtdG8tc21hbGxlc3QgPT4gWzBdIGhhcyBiZXN0IGFzc2V0XG5cdFx0XHRpZihyYW5rZWRfYXNzZXRzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRET1dOTE9BRF9CVVRUT04uaW5uZXJUZXh0ID0gXCJObyBhc3NldHMgZm91bmRcIjtcblx0XHRcdFx0RE9XTkxPQURfQlVUVE9OLmhyZWYgICAgICA9IHJlbGVhc2UuaHRtbF91cmw7XG5cdFx0XHR9IGVsc2Vcblx0XHRcdFx0RE9XTkxPQURfQlVUVE9OLmhyZWYgPSByYW5rZWRfYXNzZXRzWzBdLmRhdGEuYnJvd3Nlcl9kb3dubG9hZF91cmw7XG5cdFx0fVxuXHR9KTtcbn0pO1xuIl19
