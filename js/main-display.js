/*!
 * release-front <https://github.com/nabijaczleweli/release-front>
 * Copyright 2018 nabijaczleweli <https://nabijaczleweli.xyz>
 * Available under MIT license <https://opensource.org/licenses/mit>
 */
(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["./assets", "./platform-detect", "./url"], factory);
	} else if (typeof exports !== "undefined") {
		factory(require("./assets"), require("./platform-detect"), require("./url"));
	} else {
		var mod = {
			exports: {}
		};
		factory(global.assets, global.platformDetect, global.url);
		global.mainDisplay = mod.exports;
	}
})(this, function (_assets, _platformDetect, _url) {
	"use strict";

	window.addEventListener("load", function () {
		var DOWNLOAD_BUTTON = document.getElementById("main-button");
		var LOGO = document.getElementById("main-logo");
		var REPO_LINE = document.getElementById("main-repo-line");
		var LATEST_LINE = document.getElementById("main-latest-line");

		var HEADING_LINKS = document.getElementsByClassName("main-heading-link");
		var REPO_NAME_CONTAINERS = document.getElementsByClassName("main-repo-name");
		var LATEST_LINK_CONTAINERS = document.getElementsByClassName("main-latest-link");
		var VERSION_CONTAINERS = document.getElementsByClassName("main-version");
		var PLATFORM_CONTAINERS = document.getElementsByClassName("main-platform");

		var slug = (0, _url.extract_slug)(window.location.search);

		var platform = _platformDetect.Platform.from_platform();
		Array.from(PLATFORM_CONTAINERS).forEach(function (_) {
			return _.innerText = _platformDetect.Platform.name(platform);
		});

		var slug_name = (0, _url.full_name)(slug);
		if (slug_name) {
			Array.from(HEADING_LINKS).forEach(function (_) {
				return _.href = "//github.com/" + slug_name;
			});
			Array.from(REPO_NAME_CONTAINERS).forEach(function (_) {
				return _.innerText = slug_name;
			});
		}

		(0, _url.latest_release)(slug, function (status, release) {
			if (status < 200 || status >= 300) {
				REPO_LINE.classList.add("hidden");
				LATEST_LINE.classList.add("hidden");
				DOWNLOAD_BUTTON.classList.add("error");
				DOWNLOAD_BUTTON.innerText = "No releases found";
				DOWNLOAD_BUTTON.addEventListener("click", function () {
					return window.location.search = "";
				});
				return;
			}

			if (release.html_url) Array.from(LATEST_LINK_CONTAINERS).forEach(function (_) {
				return _.href = release.html_url;
			});

			if (release.tag_name) {
				Array.from(VERSION_CONTAINERS).forEach(function (_) {
					return _.innerText = release.tag_name;
				});

				var logo_callback = function logo_callback(logo_url) {
					if (logo_url) {
						LOGO.src = logo_url;
						LOGO.alt = slug_name + " logo";
						LOGO.title = LOGO.alt;
						LOGO.classList.remove("hidden");
					}
				};
				var assets_callback = function assets_callback(ranked_assets) {
					if (!Array.isArray(ranked_assets)) if (ranked_assets === null) ranked_assets = [];else ranked_assets = [ranked_assets];

					if (ranked_assets.length === 0) {
						DOWNLOAD_BUTTON.innerText = "No assets found";
						DOWNLOAD_BUTTON.href = release.html_url;
					} else DOWNLOAD_BUTTON.href = ranked_assets[0].data.browser_download_url;
				};

				(0, _url.get_config)(slug, release.tag_name, function (logo_url, asset_spec) {
					if (logo_url) logo_callback(logo_url);else (0, _url.find_logo)(slug, release.tag_name, logo_callback);

					if (asset_spec && (0, _assets.specifies_assets_for)(asset_spec, platform)) assets_callback((0, _assets.extract_asset_for)(asset_spec, platform, release.tag_name));else {
						var ranked_assets = (0, _assets.rank_assets)(slug.repo, release.tag_name, release.assets, platform);
						ranked_assets.sort(function (lhs, rhs) {
							return rhs.score - lhs.score;
						});
						assets_callback(ranked_assets);
					}
				});
			}
		});
	});
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
