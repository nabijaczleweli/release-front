/*!
 * release-front <https://github.com/nabijaczleweli/release-front>
 * Copyright 2018 nabijaczleweli <https://nabijaczleweli.xyz>
 * Available under MIT license <https://opensource.org/licenses/mit>
 */
(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["./platform-detect", "./url"], factory);
	} else if (typeof exports !== "undefined") {
		factory(require("./platform-detect"), require("./url"));
	} else {
		var mod = {
			exports: {}
		};
		factory(global.platformDetect, global.url);
		global.mainDisplay = mod.exports;
	}
})(this, function (_platformDetect, _url) {
	"use strict";

	window.addEventListener("load", function () {
		var DOWNLOAD_BUTTON = document.getElementsByClassName("main-button");

		var REPO_NAME_CONTAINERS = document.getElementsByClassName("main-repo-name");
		var LATEST_LINK_CONTAINERS = document.getElementsByClassName("main-latest-link");
		var VERSION_CONTAINERS = document.getElementsByClassName("main-version");
		var PLATFORM_CONTAINERS = document.getElementsByClassName("main-platform");

		var slug = (0, _url.extract_slug)(window.location.search);

		var platform = _platformDetect.Platform.from_platform();
		Array.from(PLATFORM_CONTAINERS).forEach(function (_) {
			return _.innerText = _platformDetect.Platform.name(platform);
		});

		var slug_name = (0, _url.full_name)(slug);
		if (slug_name) Array.from(REPO_NAME_CONTAINERS).forEach(function (_) {
			return _.innerText = slug_name;
		});

		(0, _url.latest_release)(slug, function (status, release) {
			if (status < 200 || status >= 300) return;

			if (release.html_url) Array.from(LATEST_LINK_CONTAINERS).forEach(function (_) {
				return _.href = release.html_url;
			});

			if (release.tag_name) Array.from(VERSION_CONTAINERS).forEach(function (_) {
				return _.innerText = release.tag_name;
			});

			console.log(release.assets);
			console.log("platform_is_windows", (0, _platformDetect.is_windows)());
		});
	});
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9qcy9tYWluLWRpc3BsYXkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBMkJBLFFBQU8sZ0JBQVAsQ0FBd0IsTUFBeEIsRUFBZ0MsWUFBTTtBQUNyQyxNQUFNLGtCQUFrQixTQUFTLHNCQUFULENBQWdDLGFBQWhDLENBQXhCOztBQUVBLE1BQU0sdUJBQXlCLFNBQVMsc0JBQVQsQ0FBZ0MsZ0JBQWhDLENBQS9CO0FBQ0EsTUFBTSx5QkFBeUIsU0FBUyxzQkFBVCxDQUFnQyxrQkFBaEMsQ0FBL0I7QUFDQSxNQUFNLHFCQUF5QixTQUFTLHNCQUFULENBQWdDLGNBQWhDLENBQS9CO0FBQ0EsTUFBTSxzQkFBeUIsU0FBUyxzQkFBVCxDQUFnQyxlQUFoQyxDQUEvQjs7QUFFQSxNQUFJLE9BQU8sdUJBQWEsT0FBTyxRQUFQLENBQWdCLE1BQTdCLENBQVg7O0FBRUEsTUFBSSxXQUFXLHlCQUFTLGFBQVQsRUFBZjtBQUNBLFFBQU0sSUFBTixDQUFXLG1CQUFYLEVBQWdDLE9BQWhDLENBQXdDO0FBQUEsVUFBSyxFQUFFLFNBQUYsR0FBYyx5QkFBUyxJQUFULENBQWMsUUFBZCxDQUFuQjtBQUFBLEdBQXhDOztBQUVBLE1BQUksWUFBWSxvQkFBVSxJQUFWLENBQWhCO0FBQ0EsTUFBRyxTQUFILEVBQ0MsTUFBTSxJQUFOLENBQVcsb0JBQVgsRUFBaUMsT0FBakMsQ0FBeUM7QUFBQSxVQUFLLEVBQUUsU0FBRixHQUFjLFNBQW5CO0FBQUEsR0FBekM7O0FBRUQsMkJBQWUsSUFBZixFQUFxQixVQUFDLE1BQUQsRUFBUyxPQUFULEVBQXFCO0FBQ3pDLE9BQUcsU0FBUyxHQUFULElBQWdCLFVBQVUsR0FBN0IsRUFFQzs7QUFFRCxPQUFHLFFBQVEsUUFBWCxFQUNDLE1BQU0sSUFBTixDQUFXLHNCQUFYLEVBQW1DLE9BQW5DLENBQTJDO0FBQUEsV0FBSyxFQUFFLElBQUYsR0FBUyxRQUFRLFFBQXRCO0FBQUEsSUFBM0M7O0FBRUQsT0FBRyxRQUFRLFFBQVgsRUFDQyxNQUFNLElBQU4sQ0FBVyxrQkFBWCxFQUErQixPQUEvQixDQUF1QztBQUFBLFdBQUssRUFBRSxTQUFGLEdBQWMsUUFBUSxRQUEzQjtBQUFBLElBQXZDOztBQUVELFdBQVEsR0FBUixDQUFZLFFBQVEsTUFBcEI7QUFDQSxXQUFRLEdBQVIsQ0FBWSxxQkFBWixFQUFtQyxpQ0FBbkM7QUFDQSxHQWJEO0FBY0EsRUEvQkQiLCJmaWxlIjoic3Rkb3V0Iiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDE4IG5hYmlqYWN6bGV3ZWxpXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuLy8gY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4vLyBTT0ZUV0FSRS5cblxuXG5pbXBvcnQge2lzX3dpbmRvd3MgYXMgcGxhdGZvcm1faXNfd2luZG93cywgUGxhdGZvcm19IGZyb20gXCIuL3BsYXRmb3JtLWRldGVjdFwiO1xuaW1wb3J0IHtleHRyYWN0X3NsdWcsIGZ1bGxfbmFtZSwgbGF0ZXN0X3JlbGVhc2V9IGZyb20gXCIuL3VybFwiO1xuXG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XG5cdGNvbnN0IERPV05MT0FEX0JVVFRPTiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJtYWluLWJ1dHRvblwiKTtcblxuXHRjb25zdCBSRVBPX05BTUVfQ09OVEFJTkVSUyAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIm1haW4tcmVwby1uYW1lXCIpO1xuXHRjb25zdCBMQVRFU1RfTElOS19DT05UQUlORVJTID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIm1haW4tbGF0ZXN0LWxpbmtcIik7XG5cdGNvbnN0IFZFUlNJT05fQ09OVEFJTkVSUyAgICAgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwibWFpbi12ZXJzaW9uXCIpO1xuXHRjb25zdCBQTEFURk9STV9DT05UQUlORVJTICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIm1haW4tcGxhdGZvcm1cIik7XG5cblx0bGV0IHNsdWcgPSBleHRyYWN0X3NsdWcod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG5cblx0bGV0IHBsYXRmb3JtID0gUGxhdGZvcm0uZnJvbV9wbGF0Zm9ybSgpO1xuXHRBcnJheS5mcm9tKFBMQVRGT1JNX0NPTlRBSU5FUlMpLmZvckVhY2goXyA9PiBfLmlubmVyVGV4dCA9IFBsYXRmb3JtLm5hbWUocGxhdGZvcm0pKTtcblxuXHRsZXQgc2x1Z19uYW1lID0gZnVsbF9uYW1lKHNsdWcpO1xuXHRpZihzbHVnX25hbWUpXG5cdFx0QXJyYXkuZnJvbShSRVBPX05BTUVfQ09OVEFJTkVSUykuZm9yRWFjaChfID0+IF8uaW5uZXJUZXh0ID0gc2x1Z19uYW1lKTtcblxuXHRsYXRlc3RfcmVsZWFzZShzbHVnLCAoc3RhdHVzLCByZWxlYXNlKSA9PiB7XG5cdFx0aWYoc3RhdHVzIDwgMjAwIHx8IHN0YXR1cyA+PSAzMDApXG5cdFx0XHQvLyBUT0RPOiB3aGF0IGRvIGhlcmU/XG5cdFx0XHRyZXR1cm47XG5cblx0XHRpZihyZWxlYXNlLmh0bWxfdXJsKVxuXHRcdFx0QXJyYXkuZnJvbShMQVRFU1RfTElOS19DT05UQUlORVJTKS5mb3JFYWNoKF8gPT4gXy5ocmVmID0gcmVsZWFzZS5odG1sX3VybCk7XG5cblx0XHRpZihyZWxlYXNlLnRhZ19uYW1lKVxuXHRcdFx0QXJyYXkuZnJvbShWRVJTSU9OX0NPTlRBSU5FUlMpLmZvckVhY2goXyA9PiBfLmlubmVyVGV4dCA9IHJlbGVhc2UudGFnX25hbWUpO1xuXG5cdFx0Y29uc29sZS5sb2cocmVsZWFzZS5hc3NldHMpO1xuXHRcdGNvbnNvbGUubG9nKFwicGxhdGZvcm1faXNfd2luZG93c1wiLCBwbGF0Zm9ybV9pc193aW5kb3dzKCkpO1xuXHR9KTtcbn0pO1xuIl19
