/*!
 * release-front <https://github.com/nabijaczleweli/release-front>
 * Copyright 2018 nabijaczleweli <https://nabijaczleweli.xyz>
 * Available under MIT license <https://opensource.org/licenses/mit>
 */
(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["exports", "enum", "platform"], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require("enum"), require("platform"));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global._enum, global.platform);
		global.platformDetect = mod.exports;
	}
})(this, function (exports, _enum, _platform) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Platform = undefined;
	exports.is_windows = is_windows;
	exports.is_mac = is_mac;

	var _enum2 = _interopRequireDefault(_enum);

	var _platform2 = _interopRequireDefault(_platform);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : {
			default: obj
		};
	}

	var Platform = exports.Platform = (0, _enum2.default)("Windows", "Linux", "Mac");

	Platform.name = function (_) {
		return Platform.keys[_] || "Unknown";
	};

	Platform.from_platform = function () {
		var pform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;

		if (is_windows(pform)) return Platform.Windows;else if (is_mac(pform)) return Platform.Mac;else return Platform.Linux;
	};

	if (Object.freeze) Object.freeze(Platform);

	function check_platform(pform, cases) {
		if (!Array.isArray(cases)) cases = [cases];

		return cases.concat(cases.map(function (_) {
			return _.toLowerCase();
		})).concat(cases.map(function (_) {
			return _.toUpperCase();
		})).some(function (_) {
			return pform.os && pform.os.family && pform.os.family.indexOf(_) !== -1 || pform.ua.indexOf(_) !== -1;
		});
	}

	function is_windows() {
		var pform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;

		return check_platform(pform, "Windows");
	}

	function is_mac() {
		var pform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;

		return check_platform(pform, ["iOS", "Darwin", "Mac"]);
	}
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9qcy9wbGF0Zm9ybS1kZXRlY3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQWtFZ0IsVSxHQUFBLFU7U0FTQSxNLEdBQUEsTTs7Ozs7Ozs7Ozs7O0FBaERULEtBQU0sOEJBQVcsb0JBQUssU0FBTCxFQUFnQixPQUFoQixFQUF5QixLQUF6QixDQUFqQjs7QUFHUCxVQUFTLElBQVQsR0FBZ0I7QUFBQSxTQUFLLFNBQVMsSUFBVCxDQUFjLENBQWQsS0FBb0IsU0FBekI7QUFBQSxFQUFoQjs7QUFTQSxVQUFTLGFBQVQsR0FBeUIsWUFBeUI7QUFBQSxNQUF4QixLQUF3Qix1RUFBaEIsa0JBQWdCOztBQUNqRCxNQUFHLFdBQVcsS0FBWCxDQUFILEVBQ0MsT0FBTyxTQUFTLE9BQWhCLENBREQsS0FFSyxJQUFHLE9BQU8sS0FBUCxDQUFILEVBQ0osT0FBTyxTQUFTLEdBQWhCLENBREksS0FHSixPQUFPLFNBQVMsS0FBaEI7QUFDRCxFQVBEOztBQVNBLEtBQUcsT0FBTyxNQUFWLEVBQ0MsT0FBTyxNQUFQLENBQWMsUUFBZDs7QUFHRCxVQUFTLGNBQVQsQ0FBd0IsS0FBeEIsRUFBK0IsS0FBL0IsRUFBc0M7QUFDckMsTUFBRyxDQUFDLE1BQU0sT0FBTixDQUFjLEtBQWQsQ0FBSixFQUNDLFFBQVEsQ0FBQyxLQUFELENBQVI7O0FBRUQsU0FBTyxNQUFNLE1BQU4sQ0FBYSxNQUFNLEdBQU4sQ0FBVTtBQUFBLFVBQUssRUFBRSxXQUFGLEVBQUw7QUFBQSxHQUFWLENBQWIsRUFDRixNQURFLENBQ0ssTUFBTSxHQUFOLENBQVU7QUFBQSxVQUFLLEVBQUUsV0FBRixFQUFMO0FBQUEsR0FBVixDQURMLEVBRUYsSUFGRSxDQUVHO0FBQUEsVUFBTSxNQUFNLEVBQU4sSUFBWSxNQUFNLEVBQU4sQ0FBUyxNQUFyQixJQUErQixNQUFNLEVBQU4sQ0FBUyxNQUFULENBQWdCLE9BQWhCLENBQXdCLENBQXhCLE1BQStCLENBQUMsQ0FBaEUsSUFBc0UsTUFBTSxFQUFOLENBQVMsT0FBVCxDQUFpQixDQUFqQixNQUF3QixDQUFDLENBQXBHO0FBQUEsR0FGSCxDQUFQO0FBR0E7O0FBT00sVUFBUyxVQUFULEdBQXlDO0FBQUEsTUFBckIsS0FBcUIsdUVBQWIsa0JBQWE7O0FBQy9DLFNBQU8sZUFBZSxLQUFmLEVBQXNCLFNBQXRCLENBQVA7QUFDQTs7QUFPTSxVQUFTLE1BQVQsR0FBcUM7QUFBQSxNQUFyQixLQUFxQix1RUFBYixrQkFBYTs7QUFDM0MsU0FBTyxlQUFlLEtBQWYsRUFBc0IsQ0FBQyxLQUFELEVBQVEsUUFBUixFQUFrQixLQUFsQixDQUF0QixDQUFQO0FBQ0EiLCJmaWxlIjoic3Rkb3V0Iiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDE4IG5hYmlqYWN6bGV3ZWxpXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuLy8gY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4vLyBTT0ZUV0FSRS5cblxuXG5pbXBvcnQgRW51bSBmcm9tIFwiZW51bVwiOyAgICAgICAgICAgIC8vIFByb3ZpZGVkIHZpYSBcIm5vZGUtZW51bVwiIGxpYnJhcnlcbmltcG9ydCBwbGF0Zm9ybV9qcyBmcm9tIFwicGxhdGZvcm1cIjsgLy8gUHJvdmlkZWQgdmlhIFwicGxhdGZvcm0uanNcIiBsaWJyYXJ5XG5cblxuZXhwb3J0IGNvbnN0IFBsYXRmb3JtID0gRW51bShcIldpbmRvd3NcIiwgXCJMaW51eFwiLCBcIk1hY1wiKTtcblxuLy8vIENvbnZlcnQgcGxhdGZvcm0gYmFjayB0byBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG5QbGF0Zm9ybS5uYW1lID0gXyA9PiBQbGF0Zm9ybS5rZXlzW19dIHx8IFwiVW5rbm93blwiO1xuXG4vLy8gR2V0ICB3aG8gdGhlIHNwZWNpZmllZCBvciBjdXJyZW50IHBsYXRmb3JtIGlzLlxuLy8vXG4vLy8gVmFsaWQgcmV0dXJuIHZhbHVlczogYFwiV2luZG93c1wiYCwgYFwiTWFjXCJgLCBgXCJMaW51eFwiYC5cbi8vL1xuLy8vIEFyZ3VtZW50czogYHBmb3JtYDogYG9iamVjdD9gIOKAkyBwbGF0Zm9ybSB0byBjaGVjaywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZGV0ZWN0ZWQgb25lLlxuLy8vXG4vLy8gUmV0dXJuczogYG51bWJlcmAgZnJvbSB0aGUgYFBsYXRmb3JtYCBlbnVtLlxuUGxhdGZvcm0uZnJvbV9wbGF0Zm9ybSA9IChwZm9ybSA9IHBsYXRmb3JtX2pzKSA9PiB7XG5cdGlmKGlzX3dpbmRvd3MocGZvcm0pKVxuXHRcdHJldHVybiBQbGF0Zm9ybS5XaW5kb3dzO1xuXHRlbHNlIGlmKGlzX21hYyhwZm9ybSkpXG5cdFx0cmV0dXJuIFBsYXRmb3JtLk1hYztcblx0ZWxzZVxuXHRcdHJldHVybiBQbGF0Zm9ybS5MaW51eDsgIC8vIFBsZWFzZS5cbn07XG5cbmlmKE9iamVjdC5mcmVlemUpXG5cdE9iamVjdC5mcmVlemUoUGxhdGZvcm0pO1xuXG5cbmZ1bmN0aW9uIGNoZWNrX3BsYXRmb3JtKHBmb3JtLCBjYXNlcykge1xuXHRpZighQXJyYXkuaXNBcnJheShjYXNlcykpXG5cdFx0Y2FzZXMgPSBbY2FzZXNdO1xuXG5cdHJldHVybiBjYXNlcy5jb25jYXQoY2FzZXMubWFwKF8gPT4gXy50b0xvd2VyQ2FzZSgpKSlcblx0ICAgIC5jb25jYXQoY2FzZXMubWFwKF8gPT4gXy50b1VwcGVyQ2FzZSgpKSlcblx0ICAgIC5zb21lKF8gPT4gKHBmb3JtLm9zICYmIHBmb3JtLm9zLmZhbWlseSAmJiBwZm9ybS5vcy5mYW1pbHkuaW5kZXhPZihfKSAhPT0gLTEpIHx8IHBmb3JtLnVhLmluZGV4T2YoXykgIT09IC0xKTtcbn1cblxuLy8vIENoZWNrIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBvciBjdXJyZW50IHBsYXRmb3JtIGFyZSBXaW5kb3dzeS5cbi8vL1xuLy8vIEFyZ3VtZW50czogYHBmb3JtYDogYG9iamVjdD9gIOKAkyBwbGF0Zm9ybSB0byBjaGVjaywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZGV0ZWN0ZWQgb25lLlxuLy8vXG4vLy8gUmV0dXJuczogYGJvb2xlYW5gLlxuZXhwb3J0IGZ1bmN0aW9uIGlzX3dpbmRvd3MocGZvcm0gPSBwbGF0Zm9ybV9qcykge1xuXHRyZXR1cm4gY2hlY2tfcGxhdGZvcm0ocGZvcm0sIFwiV2luZG93c1wiKVxufVxuXG4vLy8gQ2hlY2sgd2hldGhlciB0aGUgc3BlY2lmaWVkIG9yIGN1cnJlbnQgcGxhdGZvcm0gYXJlIEFwcGx5LlxuLy8vXG4vLy8gQXJndW1lbnRzOiBgcGZvcm1gOiBgb2JqZWN0P2Ag4oCTIHBsYXRmb3JtIHRvIGNoZWNrLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkZXRlY3RlZCBvbmUuXG4vLy9cbi8vLyBSZXR1cm5zOiBgYm9vbGVhbmAuXG5leHBvcnQgZnVuY3Rpb24gaXNfbWFjKHBmb3JtID0gcGxhdGZvcm1fanMpIHtcblx0cmV0dXJuIGNoZWNrX3BsYXRmb3JtKHBmb3JtLCBbXCJpT1NcIiwgXCJEYXJ3aW5cIiwgXCJNYWNcIl0pO1xufVxuIl19
