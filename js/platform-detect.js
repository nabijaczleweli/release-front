/*!
 * release-front <https://github.com/nabijaczleweli/release-front>
 * Copyright 2018 nabijaczleweli <https://nabijaczleweli.xyz>
 * Available under MIT license <https://opensource.org/licenses/mit>
 */
(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["exports", "enum", "platform"], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require("enum"), require("platform"));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global._enum, global.platform);
		global.platformDetect = mod.exports;
	}
})(this, function (exports, _enum, _platform) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Platform = undefined;
	exports.is_windows = is_windows;
	exports.is_mac = is_mac;

	var _enum2 = _interopRequireDefault(_enum);

	var _platform2 = _interopRequireDefault(_platform);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : {
			default: obj
		};
	}

	var Platform = exports.Platform = (0, _enum2.default)("Windows", "Linux", "Mac");

	Platform.name = function (_) {
		return Platform.keys[_] || "Unknown";
	};

	Platform.from_platform = function () {
		var pform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;

		if (is_windows(pform)) return Platform.Windows;else if (is_mac(pform)) return Platform.Mac;else return Platform.Linux;
	};

	if (Object.freeze) Object.freeze(Platform);

	function check_platform(pform, cases) {
		if (!Array.isArray(cases)) cases = [cases];

		return cases.concat(cases.map(function (_) {
			return _.toLowerCase();
		})).concat(cases.map(function (_) {
			return _.toUpperCase();
		})).some(function (_) {
			return pform.os && pform.os.family && pform.os.family.indexOf(_) !== -1 || pform.ua.indexOf(_) !== -1;
		});
	}

	function is_windows() {
		var pform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;

		return check_platform(pform, "Windows");
	}

	function is_mac() {
		var pform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;

		return check_platform(pform, ["iOS", "Darwin", "Mac"]);
	}
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9qcy9wbGF0Zm9ybS1kZXRlY3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQWtFZ0IsVSxHQUFBLFU7U0FTQSxNLEdBQUEsTTs7Ozs7Ozs7Ozs7O0FBaERULEtBQU0sOEJBQVcsb0JBQUssU0FBTCxFQUFnQixPQUFoQixFQUF5QixLQUF6QixDQUFqQjs7QUFHUCxVQUFTLElBQVQsR0FBZ0I7QUFBQSxTQUFLLFNBQVMsSUFBVCxDQUFjLENBQWQsS0FBb0IsU0FBekI7QUFBQSxFQUFoQjs7QUFTQSxVQUFTLGFBQVQsR0FBeUIsWUFBeUI7QUFBQSxNQUF4QixLQUF3Qjs7QUFDakQsTUFBRyxXQUFXLEtBQVgsQ0FBSCxFQUNDLE9BQU8sU0FBUyxPQUFoQixDQURELEtBRUssSUFBRyxPQUFPLEtBQVAsQ0FBSCxFQUNKLE9BQU8sU0FBUyxHQUFoQixDQURJLEtBR0osT0FBTyxTQUFTLEtBQWhCO0FBQ0QsRUFQRDs7QUFTQSxLQUFHLE9BQU8sTUFBVixFQUNDLE9BQU8sTUFBUCxDQUFjLFFBQWQ7O0FBR0QsVUFBUyxjQUFULENBQXdCLEtBQXhCLEVBQStCLEtBQS9CLEVBQXNDO0FBQ3JDLE1BQUcsQ0FBQyxNQUFNLE9BQU4sQ0FBYyxLQUFkLENBQUosRUFDQyxRQUFRLENBQUMsS0FBRCxDQUFSOztBQUVELFNBQU8sTUFBTSxNQUFOLENBQWEsTUFBTSxHQUFOLENBQVU7QUFBQSxVQUFLLEVBQUUsV0FBRixFQUFMO0FBQUEsR0FBVixDQUFiLEVBQ0YsTUFERSxDQUNLLE1BQU0sR0FBTixDQUFVO0FBQUEsVUFBSyxFQUFFLFdBQUYsRUFBTDtBQUFBLEdBQVYsQ0FETCxFQUVGLElBRkUsQ0FFRztBQUFBLFVBQU0sTUFBTSxFQUFOLElBQVksTUFBTSxFQUFOLENBQVMsTUFBckIsSUFBK0IsTUFBTSxFQUFOLENBQVMsTUFBVCxDQUFnQixPQUFoQixDQUF3QixDQUF4QixNQUErQixDQUFDLENBQWhFLElBQXNFLE1BQU0sRUFBTixDQUFTLE9BQVQsQ0FBaUIsQ0FBakIsTUFBd0IsQ0FBQyxDQUFwRztBQUFBLEdBRkgsQ0FBUDtBQUdBOztBQU9NLFVBQVMsVUFBVCxHQUF5QztBQUFBLE1BQXJCLEtBQXFCOztBQUMvQyxTQUFPLGVBQWUsS0FBZixFQUFzQixTQUF0QixDQUFQO0FBQ0E7O0FBT00sVUFBUyxNQUFULEdBQXFDO0FBQUEsTUFBckIsS0FBcUI7O0FBQzNDLFNBQU8sZUFBZSxLQUFmLEVBQXNCLENBQUMsS0FBRCxFQUFRLFFBQVIsRUFBa0IsS0FBbEIsQ0FBdEIsQ0FBUDtBQUNBIiwiZmlsZSI6InN0ZG91dCIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxOCBuYWJpamFjemxld2VsaVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbi8vIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuLy8gU09GVFdBUkUuXG5cblxuaW1wb3J0IEVudW0gZnJvbSBcImVudW1cIjsgICAgICAgICAgICAvLyBQcm92aWRlZCB2aWEgXCJub2RlLWVudW1cIiBsaWJyYXJ5XG5pbXBvcnQgcGxhdGZvcm1fanMgZnJvbSBcInBsYXRmb3JtXCI7IC8vIFByb3ZpZGVkIHZpYSBcInBsYXRmb3JtLmpzXCIgbGlicmFyeVxuXG5cbmV4cG9ydCBjb25zdCBQbGF0Zm9ybSA9IEVudW0oXCJXaW5kb3dzXCIsIFwiTGludXhcIiwgXCJNYWNcIik7XG5cbi8vLyBDb252ZXJ0IHBsYXRmb3JtIGJhY2sgdG8gc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuUGxhdGZvcm0ubmFtZSA9IF8gPT4gUGxhdGZvcm0ua2V5c1tfXSB8fCBcIlVua25vd25cIjtcblxuLy8vIEdldCAgd2hvIHRoZSBzcGVjaWZpZWQgb3IgY3VycmVudCBwbGF0Zm9ybSBpcy5cbi8vL1xuLy8vIFZhbGlkIHJldHVybiB2YWx1ZXM6IGBcIldpbmRvd3NcImAsIGBcIk1hY1wiYCwgYFwiTGludXhcImAuXG4vLy9cbi8vLyBBcmd1bWVudHM6IGBwZm9ybWA6IGBvYmplY3Q/YCDigJMgcGxhdGZvcm0gdG8gY2hlY2ssIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRldGVjdGVkIG9uZS5cbi8vL1xuLy8vIFJldHVybnM6IGBudW1iZXJgIGZyb20gdGhlIGBQbGF0Zm9ybWAgZW51bS5cblBsYXRmb3JtLmZyb21fcGxhdGZvcm0gPSAocGZvcm0gPSBwbGF0Zm9ybV9qcykgPT4ge1xuXHRpZihpc193aW5kb3dzKHBmb3JtKSlcblx0XHRyZXR1cm4gUGxhdGZvcm0uV2luZG93cztcblx0ZWxzZSBpZihpc19tYWMocGZvcm0pKVxuXHRcdHJldHVybiBQbGF0Zm9ybS5NYWM7XG5cdGVsc2Vcblx0XHRyZXR1cm4gUGxhdGZvcm0uTGludXg7ICAvLyBQbGVhc2UuXG59O1xuXG5pZihPYmplY3QuZnJlZXplKVxuXHRPYmplY3QuZnJlZXplKFBsYXRmb3JtKTtcblxuXG5mdW5jdGlvbiBjaGVja19wbGF0Zm9ybShwZm9ybSwgY2FzZXMpIHtcblx0aWYoIUFycmF5LmlzQXJyYXkoY2FzZXMpKVxuXHRcdGNhc2VzID0gW2Nhc2VzXTtcblxuXHRyZXR1cm4gY2FzZXMuY29uY2F0KGNhc2VzLm1hcChfID0+IF8udG9Mb3dlckNhc2UoKSkpXG5cdCAgICAuY29uY2F0KGNhc2VzLm1hcChfID0+IF8udG9VcHBlckNhc2UoKSkpXG5cdCAgICAuc29tZShfID0+IChwZm9ybS5vcyAmJiBwZm9ybS5vcy5mYW1pbHkgJiYgcGZvcm0ub3MuZmFtaWx5LmluZGV4T2YoXykgIT09IC0xKSB8fCBwZm9ybS51YS5pbmRleE9mKF8pICE9PSAtMSk7XG59XG5cbi8vLyBDaGVjayB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgb3IgY3VycmVudCBwbGF0Zm9ybSBhcmUgV2luZG93c3kuXG4vLy9cbi8vLyBBcmd1bWVudHM6IGBwZm9ybWA6IGBvYmplY3Q/YCDigJMgcGxhdGZvcm0gdG8gY2hlY2ssIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRldGVjdGVkIG9uZS5cbi8vL1xuLy8vIFJldHVybnM6IGBib29sZWFuYC5cbmV4cG9ydCBmdW5jdGlvbiBpc193aW5kb3dzKHBmb3JtID0gcGxhdGZvcm1fanMpIHtcblx0cmV0dXJuIGNoZWNrX3BsYXRmb3JtKHBmb3JtLCBcIldpbmRvd3NcIilcbn1cblxuLy8vIENoZWNrIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBvciBjdXJyZW50IHBsYXRmb3JtIGFyZSBBcHBseS5cbi8vL1xuLy8vIEFyZ3VtZW50czogYHBmb3JtYDogYG9iamVjdD9gIOKAkyBwbGF0Zm9ybSB0byBjaGVjaywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZGV0ZWN0ZWQgb25lLlxuLy8vXG4vLy8gUmV0dXJuczogYGJvb2xlYW5gLlxuZXhwb3J0IGZ1bmN0aW9uIGlzX21hYyhwZm9ybSA9IHBsYXRmb3JtX2pzKSB7XG5cdHJldHVybiBjaGVja19wbGF0Zm9ybShwZm9ybSwgW1wiaU9TXCIsIFwiRGFyd2luXCIsIFwiTWFjXCJdKTtcbn1cbiJdfQ==
