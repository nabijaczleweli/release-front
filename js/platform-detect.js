/*!
 * release-front <https://github.com/nabijaczleweli/release-front>
 * Copyright 2018 nabijaczleweli <https://nabijaczleweli.xyz>
 * Available under MIT license <https://opensource.org/licenses/mit>
 */
(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["exports", "platform"], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require("platform"));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.platform);
		global.platformDetect = mod.exports;
	}
})(this, function (exports, _platform) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.platform_string = exports.is_windows = exports.is_mac = undefined;

	var _platform2 = _interopRequireDefault(_platform);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : {
			default: obj
		};
	}

	exports.is_mac = is_mac;
	exports.is_windows = is_windows;
	exports.platform_string = platform_string;


	function check_platform(pform, cases) {
		if (!Array.isArray(cases)) cases = [cases];

		return cases.concat(cases.map(function (_) {
			return _.toLowerCase();
		})).concat(cases.map(function (_) {
			return _.toUpperCase();
		})).some(function (_) {
			return pform.os && pform.os.family && pform.os.family.indexOf(_) !== -1 || pform.ua.indexOf(_) !== -1;
		});
	}

	function is_windows() {
		var pform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;

		return check_platform(pform, "Windows");
	}

	function is_mac() {
		var pform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;

		return check_platform(pform, ["iOS", "Darwin", "Mac"]);
	}

	function platform_string() {
		var pform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;

		if (is_windows(pform)) return "Windows";else if (is_mac(pform)) return "Mac";else return "Linux";
	}
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9qcy9wbGF0Zm9ybS1kZXRlY3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQXlCUSxNLEdBQUEsTTtTQUFRLFUsR0FBQSxVO1NBQVksZSxHQUFBLGU7OztBQUc1QixVQUFTLGNBQVQsQ0FBd0IsS0FBeEIsRUFBK0IsS0FBL0IsRUFBc0M7QUFDckMsTUFBRyxDQUFDLE1BQU0sT0FBTixDQUFjLEtBQWQsQ0FBSixFQUNDLFFBQVEsQ0FBQyxLQUFELENBQVI7O0FBRUQsU0FBTyxNQUFNLE1BQU4sQ0FBYSxNQUFNLEdBQU4sQ0FBVTtBQUFBLFVBQUssRUFBRSxXQUFGLEVBQUw7QUFBQSxHQUFWLENBQWIsRUFDRixNQURFLENBQ0ssTUFBTSxHQUFOLENBQVU7QUFBQSxVQUFLLEVBQUUsV0FBRixFQUFMO0FBQUEsR0FBVixDQURMLEVBRUYsSUFGRSxDQUVHO0FBQUEsVUFBTSxNQUFNLEVBQU4sSUFBWSxNQUFNLEVBQU4sQ0FBUyxNQUFyQixJQUErQixNQUFNLEVBQU4sQ0FBUyxNQUFULENBQWdCLE9BQWhCLENBQXdCLENBQXhCLE1BQStCLENBQUMsQ0FBaEUsSUFBc0UsTUFBTSxFQUFOLENBQVMsT0FBVCxDQUFpQixDQUFqQixNQUF3QixDQUFDLENBQXBHO0FBQUEsR0FGSCxDQUFQO0FBR0E7O0FBT0QsVUFBUyxVQUFULEdBQXlDO0FBQUEsTUFBckIsS0FBcUI7O0FBQ3hDLFNBQU8sZUFBZSxLQUFmLEVBQXNCLFNBQXRCLENBQVA7QUFDQTs7QUFPRCxVQUFTLE1BQVQsR0FBcUM7QUFBQSxNQUFyQixLQUFxQjs7QUFDcEMsU0FBTyxlQUFlLEtBQWYsRUFBc0IsQ0FBQyxLQUFELEVBQVEsUUFBUixFQUFrQixLQUFsQixDQUF0QixDQUFQO0FBQ0E7O0FBU0QsVUFBUyxlQUFULEdBQThDO0FBQUEsTUFBckIsS0FBcUI7O0FBQzdDLE1BQUcsV0FBVyxLQUFYLENBQUgsRUFDQyxPQUFPLFNBQVAsQ0FERCxLQUVLLElBQUcsT0FBTyxLQUFQLENBQUgsRUFDSixPQUFPLEtBQVAsQ0FESSxLQUdKLE9BQU8sT0FBUDtBQUNEIiwiZmlsZSI6InN0ZG91dCIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxOCBuYWJpamFjemxld2VsaVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbi8vIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuLy8gU09GVFdBUkUuXG5cblxuaW1wb3J0IHBsYXRmb3JtX2pzIGZyb20gXCJwbGF0Zm9ybVwiOyAvLyBQcm92aWRlZCB2aWEgXCJwbGF0Zm9ybS5qc1wiIGxpYnJhcnlcblxuZXhwb3J0IHtpc19tYWMsIGlzX3dpbmRvd3MsIHBsYXRmb3JtX3N0cmluZ307XG5cblxuZnVuY3Rpb24gY2hlY2tfcGxhdGZvcm0ocGZvcm0sIGNhc2VzKSB7XG5cdGlmKCFBcnJheS5pc0FycmF5KGNhc2VzKSlcblx0XHRjYXNlcyA9IFtjYXNlc107XG5cblx0cmV0dXJuIGNhc2VzLmNvbmNhdChjYXNlcy5tYXAoXyA9PiBfLnRvTG93ZXJDYXNlKCkpKVxuXHQgICAgLmNvbmNhdChjYXNlcy5tYXAoXyA9PiBfLnRvVXBwZXJDYXNlKCkpKVxuXHQgICAgLnNvbWUoXyA9PiAocGZvcm0ub3MgJiYgcGZvcm0ub3MuZmFtaWx5ICYmIHBmb3JtLm9zLmZhbWlseS5pbmRleE9mKF8pICE9PSAtMSkgfHwgcGZvcm0udWEuaW5kZXhPZihfKSAhPT0gLTEpO1xufVxuXG4vLy8gQ2hlY2sgd2hldGhlciB0aGUgc3BlY2lmaWVkIG9yIGN1cnJlbnQgcGxhdGZvcm0gYXJlIFdpbmRvd3N5LlxuLy8vXG4vLy8gQXJndW1lbnRzOiBgcGZvcm1gOiBgb2JqZWN0P2Ag4oCTIHBsYXRmb3JtIHRvIGNoZWNrLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkZXRlY3RlZCBvbmUuXG4vLy9cbi8vLyBSZXR1cm5zOiBgYm9vbGVhbmAuXG5mdW5jdGlvbiBpc193aW5kb3dzKHBmb3JtID0gcGxhdGZvcm1fanMpIHtcblx0cmV0dXJuIGNoZWNrX3BsYXRmb3JtKHBmb3JtLCBcIldpbmRvd3NcIilcbn1cblxuLy8vIENoZWNrIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBvciBjdXJyZW50IHBsYXRmb3JtIGFyZSBBcHBseS5cbi8vL1xuLy8vIEFyZ3VtZW50czogYHBmb3JtYDogYG9iamVjdD9gIOKAkyBwbGF0Zm9ybSB0byBjaGVjaywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZGV0ZWN0ZWQgb25lLlxuLy8vXG4vLy8gUmV0dXJuczogYGJvb2xlYW5gLlxuZnVuY3Rpb24gaXNfbWFjKHBmb3JtID0gcGxhdGZvcm1fanMpIHtcblx0cmV0dXJuIGNoZWNrX3BsYXRmb3JtKHBmb3JtLCBbXCJpT1NcIiwgXCJEYXJ3aW5cIiwgXCJNYWNcIl0pO1xufVxuXG4vLy8gR2V0IGEgc2ltcGxlIHN0cmluZyByZXByZXNlbnRpbmcgd2hvIHRoZSBzcGVjaWZpZWQgb3IgY3VycmVudCBwbGF0Zm9ybSBpcy5cbi8vL1xuLy8vIFZhbGlkIHJldHVybiB2YWx1ZXM6IGBcIldpbmRvd3NcImAsIGBcIk1hY1wiYCwgYFwiTGludXhcImAuXG4vLy9cbi8vLyBBcmd1bWVudHM6IGBwZm9ybWA6IGBvYmplY3Q/YCDigJMgcGxhdGZvcm0gdG8gY2hlY2ssIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRldGVjdGVkIG9uZS5cbi8vL1xuLy8vIFJldHVybnM6IGBzdHJpbmdgLlxuZnVuY3Rpb24gcGxhdGZvcm1fc3RyaW5nKHBmb3JtID0gcGxhdGZvcm1fanMpIHtcblx0aWYoaXNfd2luZG93cyhwZm9ybSkpXG5cdFx0cmV0dXJuIFwiV2luZG93c1wiO1xuXHRlbHNlIGlmKGlzX21hYyhwZm9ybSkpXG5cdFx0cmV0dXJuIFwiTWFjXCI7XG5cdGVsc2Vcblx0XHRyZXR1cm4gXCJMaW51eFwiOyAgLy8gUGxlYXNlLlxufVxuIl19
