/*!
 * release-front <https://github.com/nabijaczleweli/release-front>
 * Copyright 2018 nabijaczleweli <https://nabijaczleweli.xyz>
 * Available under MIT license <https://opensource.org/licenses/mit>
 */
(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["exports", "./platform-detect"], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require("./platform-detect"));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.platformDetect);
		global.assets = mod.exports;
	}
})(this, function (exports, _platformDetect) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.rank_assets = rank_assets;


	var PACK_EXTENSIONS = [".tar", ".tgz", ".tgz2", ".tbz2", ".xz", ".zip"];

	var WINDOWS_REGEXES = [/\.exe$/];
	var LINUX_REGEXES = [/\.out$/, /^[^.]+$/];
	var MAC_REGEXES = [];

	var MANUAL_REGEX = /man/i;
	var DOCUMENTATION_REGEX = /doc/i;

	var PLATFORMS_REGEXES = {};
	PLATFORMS_REGEXES[_platformDetect.Platform.Windows] = WINDOWS_REGEXES;
	PLATFORMS_REGEXES[_platformDetect.Platform.Linux] = LINUX_REGEXES;
	PLATFORMS_REGEXES[_platformDetect.Platform.Mac] = MAC_REGEXES;

	function rank_assets(project_name, tag_name, assets, platform) {
		if (_platformDetect.Platform.all.indexOf(platform) !== -1 && Array.isArray(assets) && tag_name && project_name) {
			var project_man = MANUAL_REGEX.test(project_name);
			var project_doc = DOCUMENTATION_REGEX.test(project_name);
			var platform_name = _platformDetect.Platform.name(platform);
			var platform_name_regex = new RegExp(platform_name, "i");

			return assets.map(function (data) {
				var data_name_reduced = data.name;
				for (var ext = ""; ext !== undefined; ext = PACK_EXTENSIONS.find(function (_) {
					return data_name_reduced.endsWith(_);
				})) {
					data_name_reduced = data_name_reduced.substr(0, data_name_reduced.length - ext.length);
				}data_name_reduced = data_name_reduced.replace(tag_name, "");

				var score = 0;

				if (PLATFORMS_REGEXES[platform].some(function (_) {
					return _.test(data_name_reduced);
				})) score += 2;

				if (platform_name_regex.test(data_name_reduced)) score += 1;

				if (!project_man && MANUAL_REGEX.test(data_name_reduced)) score -= 1;

				if (!project_doc && DOCUMENTATION_REGEX.test(data_name_reduced)) score -= 1;

				return { score: score, data: data };
			});
		} else return [];
	}
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9qcy9hc3NldHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBMERnQixXLEdBQUEsVzs7O0FBaENoQixLQUFNLGtCQUFrQixDQUFDLE1BQUQsRUFBUyxNQUFULEVBQWlCLE9BQWpCLEVBQTBCLE9BQTFCLEVBQW1DLEtBQW5DLEVBQTBDLE1BQTFDLENBQXhCOztBQUVBLEtBQU0sa0JBQWtCLENBQUMsUUFBRCxDQUF4QjtBQUNBLEtBQU0sZ0JBQWtCLENBQUMsUUFBRCxFQUFXLFNBQVgsQ0FBeEI7QUFDQSxLQUFNLGNBQWtCLEVBQXhCOztBQUVBLEtBQU0sZUFBc0IsTUFBNUI7QUFDQSxLQUFNLHNCQUFzQixNQUE1Qjs7QUFFQSxLQUFNLG9CQUFnQyxFQUF0QztBQUNBLG1CQUFrQix5QkFBUyxPQUEzQixJQUFzQyxlQUF0QztBQUNBLG1CQUFrQix5QkFBUyxLQUEzQixJQUFzQyxhQUF0QztBQUNBLG1CQUFrQix5QkFBUyxHQUEzQixJQUFzQyxXQUF0Qzs7QUFvQk8sVUFBUyxXQUFULENBQXFCLFlBQXJCLEVBQW1DLFFBQW5DLEVBQTZDLE1BQTdDLEVBQXFELFFBQXJELEVBQStEO0FBQ3JFLE1BQUcseUJBQVMsR0FBVCxDQUFhLE9BQWIsQ0FBcUIsUUFBckIsTUFBbUMsQ0FBQyxDQUFwQyxJQUF5QyxNQUFNLE9BQU4sQ0FBYyxNQUFkLENBQXpDLElBQWtFLFFBQWxFLElBQThFLFlBQWpGLEVBQStGO0FBQzlGLE9BQUksY0FBc0IsYUFBYSxJQUFiLENBQWtCLFlBQWxCLENBQTFCO0FBQ0EsT0FBSSxjQUFzQixvQkFBb0IsSUFBcEIsQ0FBeUIsWUFBekIsQ0FBMUI7QUFDQSxPQUFJLGdCQUFzQix5QkFBUyxJQUFULENBQWMsUUFBZCxDQUExQjtBQUNBLE9BQUksc0JBQXNCLElBQUksTUFBSixDQUFXLGFBQVgsRUFBMEIsR0FBMUIsQ0FBMUI7O0FBRUEsVUFBTyxPQUFPLEdBQVAsQ0FBVyxnQkFBUTtBQUN6QixRQUFJLG9CQUFvQixLQUFLLElBQTdCO0FBQ0EsU0FBSSxJQUFJLE1BQU0sRUFBZCxFQUFrQixRQUFRLFNBQTFCLEVBQXFDLE1BQU0sZ0JBQWdCLElBQWhCLENBQXFCO0FBQUEsWUFBSyxrQkFBa0IsUUFBbEIsQ0FBMkIsQ0FBM0IsQ0FBTDtBQUFBLEtBQXJCLENBQTNDO0FBQ0MseUJBQW9CLGtCQUFrQixNQUFsQixDQUF5QixDQUF6QixFQUE0QixrQkFBa0IsTUFBbEIsR0FBMkIsSUFBSSxNQUEzRCxDQUFwQjtBQURELEtBRUEsb0JBQW9CLGtCQUFrQixPQUFsQixDQUEwQixRQUExQixFQUFvQyxFQUFwQyxDQUFwQjs7QUFFQSxRQUFJLFFBQVEsQ0FBWjs7QUFFQSxRQUFHLGtCQUFrQixRQUFsQixFQUE0QixJQUE1QixDQUFpQztBQUFBLFlBQUssRUFBRSxJQUFGLENBQU8saUJBQVAsQ0FBTDtBQUFBLEtBQWpDLENBQUgsRUFDQyxTQUFTLENBQVQ7O0FBRUQsUUFBRyxvQkFBb0IsSUFBcEIsQ0FBeUIsaUJBQXpCLENBQUgsRUFDQyxTQUFTLENBQVQ7O0FBRUQsUUFBRyxDQUFDLFdBQUQsSUFBZ0IsYUFBYSxJQUFiLENBQWtCLGlCQUFsQixDQUFuQixFQUNDLFNBQVMsQ0FBVDs7QUFFRCxRQUFHLENBQUMsV0FBRCxJQUFnQixvQkFBb0IsSUFBcEIsQ0FBeUIsaUJBQXpCLENBQW5CLEVBQ0MsU0FBUyxDQUFUOztBQUVELFdBQU8sRUFBQyxZQUFELEVBQVEsVUFBUixFQUFQO0FBQ0EsSUFyQk0sQ0FBUDtBQXNCQSxHQTVCRCxNQTZCQyxPQUFPLEVBQVA7QUFDRCIsImZpbGUiOiJzdGRvdXQiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTggbmFiaWphY3psZXdlbGlcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbi8vIFNPRlRXQVJFLlxuXG5cbmltcG9ydCB7UGxhdGZvcm19IGZyb20gXCIuL3BsYXRmb3JtLWRldGVjdFwiO1xuXG5cbmNvbnN0IFBBQ0tfRVhURU5TSU9OUyA9IFtcIi50YXJcIiwgXCIudGd6XCIsIFwiLnRnejJcIiwgXCIudGJ6MlwiLCBcIi54elwiLCBcIi56aXBcIl07XG5cbmNvbnN0IFdJTkRPV1NfUkVHRVhFUyA9IFsvXFwuZXhlJC9dO1xuY29uc3QgTElOVVhfUkVHRVhFUyAgID0gWy9cXC5vdXQkLywgL15bXi5dKyQvXTtcbmNvbnN0IE1BQ19SRUdFWEVTICAgICA9IFtdOyAgLy8gVE9ETz9cblxuY29uc3QgTUFOVUFMX1JFR0VYICAgICAgICA9IC9tYW4vaTtcbmNvbnN0IERPQ1VNRU5UQVRJT05fUkVHRVggPSAvZG9jL2k7XG5cbmNvbnN0IFBMQVRGT1JNU19SRUdFWEVTICAgICAgICAgICAgID0ge307XG5QTEFURk9STVNfUkVHRVhFU1tQbGF0Zm9ybS5XaW5kb3dzXSA9IFdJTkRPV1NfUkVHRVhFUztcblBMQVRGT1JNU19SRUdFWEVTW1BsYXRmb3JtLkxpbnV4XSAgID0gTElOVVhfUkVHRVhFUztcblBMQVRGT1JNU19SRUdFWEVTW1BsYXRmb3JtLk1hY10gICAgID0gTUFDX1JFR0VYRVM7XG5cblxuLy8vIFJhbmsgdGhlIHNwZWNpZmllZCBhc3NldHMgYWNjb3JkaW5nIHRvIHRoZWlyIHN1aXRhYmlsaXR5IGZvciB0aGUgc3BlY2lmaWVkIHBsYXRmb3JtIGFuZCBwcm9qZWN0LlxuLy8vXG4vLy8gSWYgYW4gYXNzZXQgbWF0Y2hlcyBvbmUgb2YgdGhlIGV4Y3V0YWJsZSByZWdleGVzIGZvciB0aGUgcGxhdGZvcm0sIGl0J3MgZ3JhbnRlZCAyIHBvaW50cy5cbi8vL1xuLy8vIElmIGFuIGFzc2V0IGNvbnRhaW5zIHRoZSBuYW1lIG9mIHRoZSBwbGF0Zm9ybSwgaXQncyBncmFudGVkIDEgcG9pbnQuXG4vLy9cbi8vLyBJZiBhbiBhc3NldCBtYXRjaGVzIHRoZSBtYW51YWwgcmVnZXggYW5kIHRoZSBwcm9qZWN0IG5hbWUgZG9lcyBub3QsIGl0J3Mgc3Vic3RyYWN0ZWQgMSBwb2ludC5cbi8vL1xuLy8vIElmIGFuIGFzc2V0IG1hdGNoZXMgdGhlIGRvY3VtZW50YXRpb24gcmVnZXggYW5kIHRoZSBwcm9qZWN0IG5hbWUgZG9lcyBub3QsIGl0J3Mgc3Vic3RyYWN0ZWQgMSBwb2ludC5cbi8vL1xuLy8vIEFyZ3VtZW50czpcbi8vLyAgICogYHByb2plY3RfbmFtZWA6IGBzdHJpbmdgIOKAkyB0aGUgbmFtZSBvZiB0aGUgcHJvamVjdCB3L28gdGhlIG93bmVyLFxuLy8vICAgKiBgdGFnX25hbWVgOiBgc3RyaW5nYCDigJMgdGhlIG5hbWUgb2YgdGhlIGN1cnJlbnQgdGFnLFxuLy8vICAgKiBgYXNzZXRzYDogYFtvYmplY3RdYCDigJMgYXJyYXkgb2YgYXNzZXRzIGFjcXVpcmVkIGZyb20gdGhlIEdpdEh1YiBBUEksXG4vLy8gICAqIGBwbGF0Zm9ybWA6IGDiiIggUGxhdGZvcm1gIOKAkyB0aGUgcGxhdGZvcm0gdG8gcmFuayBmb3IuXG4vLy9cbi8vLyBSZXR1cm5zOiBgW29iamVjdF1gOiBge3Njb3JlLCBkYXRhfWAgd2hlcmUgc2NvcmUgaXMgdGhlIHJhbmssIGhpZ2hlciB0aGUgYmV0dGVyLCBhbmQgZGF0YSBpcyB0aGUgb3JpZ2luYWwgYXNzZXQgb2JqZWN0LlxuZXhwb3J0IGZ1bmN0aW9uIHJhbmtfYXNzZXRzKHByb2plY3RfbmFtZSwgdGFnX25hbWUsIGFzc2V0cywgcGxhdGZvcm0pIHtcblx0aWYoUGxhdGZvcm0uYWxsLmluZGV4T2YocGxhdGZvcm0pICE9PSAtMSAmJiBBcnJheS5pc0FycmF5KGFzc2V0cykgJiYgdGFnX25hbWUgJiYgcHJvamVjdF9uYW1lKSB7XG5cdFx0bGV0IHByb2plY3RfbWFuICAgICAgICAgPSBNQU5VQUxfUkVHRVgudGVzdChwcm9qZWN0X25hbWUpO1xuXHRcdGxldCBwcm9qZWN0X2RvYyAgICAgICAgID0gRE9DVU1FTlRBVElPTl9SRUdFWC50ZXN0KHByb2plY3RfbmFtZSk7XG5cdFx0bGV0IHBsYXRmb3JtX25hbWUgICAgICAgPSBQbGF0Zm9ybS5uYW1lKHBsYXRmb3JtKTtcblx0XHRsZXQgcGxhdGZvcm1fbmFtZV9yZWdleCA9IG5ldyBSZWdFeHAocGxhdGZvcm1fbmFtZSwgXCJpXCIpO1xuXG5cdFx0cmV0dXJuIGFzc2V0cy5tYXAoZGF0YSA9PiB7XG5cdFx0XHRsZXQgZGF0YV9uYW1lX3JlZHVjZWQgPSBkYXRhLm5hbWU7XG5cdFx0XHRmb3IobGV0IGV4dCA9IFwiXCI7IGV4dCAhPT0gdW5kZWZpbmVkOyBleHQgPSBQQUNLX0VYVEVOU0lPTlMuZmluZChfID0+IGRhdGFfbmFtZV9yZWR1Y2VkLmVuZHNXaXRoKF8pKSlcblx0XHRcdFx0ZGF0YV9uYW1lX3JlZHVjZWQgPSBkYXRhX25hbWVfcmVkdWNlZC5zdWJzdHIoMCwgZGF0YV9uYW1lX3JlZHVjZWQubGVuZ3RoIC0gZXh0Lmxlbmd0aCk7XG5cdFx0XHRkYXRhX25hbWVfcmVkdWNlZCA9IGRhdGFfbmFtZV9yZWR1Y2VkLnJlcGxhY2UodGFnX25hbWUsIFwiXCIpO1xuXG5cdFx0XHRsZXQgc2NvcmUgPSAwO1xuXG5cdFx0XHRpZihQTEFURk9STVNfUkVHRVhFU1twbGF0Zm9ybV0uc29tZShfID0+IF8udGVzdChkYXRhX25hbWVfcmVkdWNlZCkpKVxuXHRcdFx0XHRzY29yZSArPSAyO1xuXG5cdFx0XHRpZihwbGF0Zm9ybV9uYW1lX3JlZ2V4LnRlc3QoZGF0YV9uYW1lX3JlZHVjZWQpKVxuXHRcdFx0XHRzY29yZSArPSAxO1xuXG5cdFx0XHRpZighcHJvamVjdF9tYW4gJiYgTUFOVUFMX1JFR0VYLnRlc3QoZGF0YV9uYW1lX3JlZHVjZWQpKVxuXHRcdFx0XHRzY29yZSAtPSAxO1xuXG5cdFx0XHRpZighcHJvamVjdF9kb2MgJiYgRE9DVU1FTlRBVElPTl9SRUdFWC50ZXN0KGRhdGFfbmFtZV9yZWR1Y2VkKSlcblx0XHRcdFx0c2NvcmUgLT0gMTtcblxuXHRcdFx0cmV0dXJuIHtzY29yZSwgZGF0YX07XG5cdFx0fSk7XG5cdH0gZWxzZVxuXHRcdHJldHVybiBbXTtcbn1cbiJdfQ==
