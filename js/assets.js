/*!
 * release-front <https://github.com/nabijaczleweli/release-front>
 * Copyright 2018 nabijaczleweli <https://nabijaczleweli.xyz>
 * Available under MIT license <https://opensource.org/licenses/mit>
 */
(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["exports", "./platform-detect", "./util"], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require("./platform-detect"), require("./util"));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.platformDetect, global.util);
		global.assets = mod.exports;
	}
})(this, function (exports, _platformDetect, _util) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.rank_assets = rank_assets;
	exports.specifies_assets_for = specifies_assets_for;
	exports.extract_asset_for = extract_asset_for;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
		return typeof obj;
	} : function (obj) {
		return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	};

	var PACK_EXTENSIONS = [".tar", ".tgz", ".tgz2", ".tbz2", ".xz", ".zip"];

	var WINDOWS_REGEXES = [/\.exe$/];
	var LINUX_REGEXES = [/\.out$/, /^[^.]+$/];
	var MAC_REGEXES = [/\.dmg$/];

	var MANUAL_REGEX = /man/i;
	var DOCUMENTATION_REGEX = /doc/i;

	var PLATFORMS_REGEXES = {};
	PLATFORMS_REGEXES[_platformDetect.Platform.Windows] = WINDOWS_REGEXES;
	PLATFORMS_REGEXES[_platformDetect.Platform.Linux] = LINUX_REGEXES;
	PLATFORMS_REGEXES[_platformDetect.Platform.Mac] = MAC_REGEXES;

	var PLATFORM_NAME_REGEXES = _platformDetect.Platform.all.map(function (_) {
		return new RegExp(_platformDetect.Platform.name(_), "i");
	});

	function rank_assets(project_name, tag_name, assets, platform) {
		if (_platformDetect.Platform.all.indexOf(platform) !== -1 && Array.isArray(assets) && tag_name && project_name) {
			var project_man = MANUAL_REGEX.test(project_name);
			var project_doc = DOCUMENTATION_REGEX.test(project_name);
			var platform_name = _platformDetect.Platform.name(platform);
			var platform_name_regex = new RegExp(platform_name, "i");

			return assets.map(function (data) {
				var data_name_reduced = data.name;
				for (var ext = ""; ext !== undefined; ext = PACK_EXTENSIONS.find(function (_) {
					return data_name_reduced.endsWith(_);
				})) {
					data_name_reduced = data_name_reduced.substr(0, data_name_reduced.length - ext.length);
				}data_name_reduced = (0, _util.replace_all)(data_name_reduced, tag_name, "");
				if (tag_name.startsWith("v")) data_name_reduced = (0, _util.replace_all)(data_name_reduced, tag_name.substr(1), "");

				var score = 0;

				if (PLATFORMS_REGEXES[platform].some(function (_) {
					return _.test(data_name_reduced);
				})) score += 2;

				if (platform_name_regex.test(data_name_reduced)) score += 1;

				if (!project_man && MANUAL_REGEX.test(data_name_reduced)) score -= 1;

				if (!project_doc && DOCUMENTATION_REGEX.test(data_name_reduced)) score -= 1;

				return { score: score, data: data };
			});
		} else return [];
	}

	function specifies_assets_for(config_asset_spec, platform) {
		if (_platformDetect.Platform.all.indexOf(platform) !== -1 && (typeof config_asset_spec === "undefined" ? "undefined" : _typeof(config_asset_spec)) === "object" && config_asset_spec !== null) return Object.keys(config_asset_spec).some(function (_) {
			return PLATFORM_NAME_REGEXES[platform].test(_) && config_asset_spec[_] !== null;
		});else return false;
	}

	function extract_asset_for(config_asset_spec, platform, assets, tag_name) {
		if (tag_name && Array.isArray(assets) && specifies_assets_for(config_asset_spec, platform)) {
			var template = Object.keys(config_asset_spec).find(function (_) {
				return PLATFORM_NAME_REGEXES[platform].test(_);
			});
			if (template === null || (template = config_asset_spec[template]) === null) return null;

			var tag_name_reduced = tag_name;
			if (tag_name_reduced.startsWith("v")) tag_name_reduced = tag_name_reduced.substr(1);

			template = (0, _util.replace_all)(template, "${TAG_NAME}", tag_name);
			template = (0, _util.replace_all)(template, "${TAG_NAME_REDUCED}", tag_name_reduced);

			return assets.find(function (_) {
				return _.name === template;
			}) || null;
		} else return null;
	}
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0FBRUQsY0FBVyx1QkFBWSxRQUFaLEVBQXNCLGFBQXRCLEVBQXFDLFFBQXJDLENBQVg7QUFDQSxjQUFXLHVCQUFZLFFBQVosRUFBc0IscUJBQXRCLEVBQTZDLGdCQUE3QyxDQUFYOztBQUVBLFVBQU8sT0FBTyxJQUFQLENBQVk7QUFBQSxXQUFLLEVBQUUsSUFBRixLQUFXLFFBQWhCO0FBQUEsSUFBWixLQUF5QyxJQUFoRDtBQUNBLEdBYkQsTUFjQyxPQUFPLElBQVA7QUFDRCIsImZpbGUiOiJzdGRvdXQiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTggbmFiaWphY3psZXdlbGlcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbi8vIFNPRlRXQVJFLlxuXG5cbmltcG9ydCB7UGxhdGZvcm19IGZyb20gXCIuL3BsYXRmb3JtLWRldGVjdFwiO1xuaW1wb3J0IHtyZXBsYWNlX2FsbH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5cbmNvbnN0IFBBQ0tfRVhURU5TSU9OUyA9IFtcIi50YXJcIiwgXCIudGd6XCIsIFwiLnRnejJcIiwgXCIudGJ6MlwiLCBcIi54elwiLCBcIi56aXBcIl07XG5cbi8vIFJlbWVtYmVyIHRvIHVwZGF0ZSBpbiBSRUFETUUubWRcbmNvbnN0IFdJTkRPV1NfUkVHRVhFUyA9IFsvXFwuZXhlJC9dO1xuY29uc3QgTElOVVhfUkVHRVhFUyAgID0gWy9cXC5vdXQkLywgL15bXi5dKyQvXTtcbmNvbnN0IE1BQ19SRUdFWEVTICAgICA9IFsvXFwuZG1nJC9dO1xuXG5jb25zdCBNQU5VQUxfUkVHRVggICAgICAgID0gL21hbi9pO1xuY29uc3QgRE9DVU1FTlRBVElPTl9SRUdFWCA9IC9kb2MvaTtcblxuY29uc3QgUExBVEZPUk1TX1JFR0VYRVMgICAgICAgICAgICAgPSB7fTtcblBMQVRGT1JNU19SRUdFWEVTW1BsYXRmb3JtLldpbmRvd3NdID0gV0lORE9XU19SRUdFWEVTO1xuUExBVEZPUk1TX1JFR0VYRVNbUGxhdGZvcm0uTGludXhdICAgPSBMSU5VWF9SRUdFWEVTO1xuUExBVEZPUk1TX1JFR0VYRVNbUGxhdGZvcm0uTWFjXSAgICAgPSBNQUNfUkVHRVhFUztcblxuY29uc3QgUExBVEZPUk1fTkFNRV9SRUdFWEVTID0gUGxhdGZvcm0uYWxsLm1hcChfID0+IG5ldyBSZWdFeHAoUGxhdGZvcm0ubmFtZShfKSwgXCJpXCIpKTtcblxuXG4vLy8gUmFuayB0aGUgc3BlY2lmaWVkIGFzc2V0cyBhY2NvcmRpbmcgdG8gdGhlaXIgc3VpdGFiaWxpdHkgZm9yIHRoZSBzcGVjaWZpZWQgcGxhdGZvcm0gYW5kIHByb2plY3QuXG4vLy9cbi8vLyBJZiBhbiBhc3NldCBtYXRjaGVzIG9uZSBvZiB0aGUgZXhjdXRhYmxlIHJlZ2V4ZXMgZm9yIHRoZSBwbGF0Zm9ybSwgaXQncyBncmFudGVkIDIgcG9pbnRzLlxuLy8vXG4vLy8gSWYgYW4gYXNzZXQgY29udGFpbnMgdGhlIG5hbWUgb2YgdGhlIHBsYXRmb3JtLCBpdCdzIGdyYW50ZWQgMSBwb2ludC5cbi8vL1xuLy8vIElmIGFuIGFzc2V0IG1hdGNoZXMgdGhlIG1hbnVhbCByZWdleCBhbmQgdGhlIHByb2plY3QgbmFtZSBkb2VzIG5vdCwgaXQncyBzdWJzdHJhY3RlZCAxIHBvaW50LlxuLy8vXG4vLy8gSWYgYW4gYXNzZXQgbWF0Y2hlcyB0aGUgZG9jdW1lbnRhdGlvbiByZWdleCBhbmQgdGhlIHByb2plY3QgbmFtZSBkb2VzIG5vdCwgaXQncyBzdWJzdHJhY3RlZCAxIHBvaW50LlxuLy8vXG4vLy8gQXJndW1lbnRzOlxuLy8vICAgKiBgcHJvamVjdF9uYW1lYDogYHN0cmluZ2Ag4oCTIHRoZSBuYW1lIG9mIHRoZSBwcm9qZWN0IHcvbyB0aGUgb3duZXIsXG4vLy8gICAqIGB0YWdfbmFtZWA6IGBzdHJpbmdgIOKAkyB0aGUgbmFtZSBvZiB0aGUgY3VycmVudCB0YWcsXG4vLy8gICAqIGBhc3NldHNgOiBgW29iamVjdF1gIOKAkyBhcnJheSBvZiBhc3NldHMgYWNxdWlyZWQgZnJvbSB0aGUgR2l0SHViIEFQSSxcbi8vLyAgICogYHBsYXRmb3JtYDogYOKIiCBQbGF0Zm9ybWAg4oCTIHRoZSBwbGF0Zm9ybSB0byByYW5rIGZvci5cbi8vL1xuLy8vIFJldHVybnM6IGBbb2JqZWN0XWA6IGB7c2NvcmUsIGRhdGF9YCB3aGVyZSBzY29yZSBpcyB0aGUgcmFuaywgaGlnaGVyIHRoZSBiZXR0ZXIsIGFuZCBkYXRhIGlzIHRoZSBvcmlnaW5hbCBhc3NldCBvYmplY3QuXG5leHBvcnQgZnVuY3Rpb24gcmFua19hc3NldHMocHJvamVjdF9uYW1lLCB0YWdfbmFtZSwgYXNzZXRzLCBwbGF0Zm9ybSkge1xuXHRpZihQbGF0Zm9ybS5hbGwuaW5kZXhPZihwbGF0Zm9ybSkgIT09IC0xICYmIEFycmF5LmlzQXJyYXkoYXNzZXRzKSAmJiB0YWdfbmFtZSAmJiBwcm9qZWN0X25hbWUpIHtcblx0XHRsZXQgcHJvamVjdF9tYW4gICAgICAgICA9IE1BTlVBTF9SRUdFWC50ZXN0KHByb2plY3RfbmFtZSk7XG5cdFx0bGV0IHByb2plY3RfZG9jICAgICAgICAgPSBET0NVTUVOVEFUSU9OX1JFR0VYLnRlc3QocHJvamVjdF9uYW1lKTtcblx0XHRsZXQgcGxhdGZvcm1fbmFtZSAgICAgICA9IFBsYXRmb3JtLm5hbWUocGxhdGZvcm0pO1xuXHRcdGxldCBwbGF0Zm9ybV9uYW1lX3JlZ2V4ID0gbmV3IFJlZ0V4cChwbGF0Zm9ybV9uYW1lLCBcImlcIik7XG5cblx0XHRyZXR1cm4gYXNzZXRzLm1hcChkYXRhID0+IHtcblx0XHRcdGxldCBkYXRhX25hbWVfcmVkdWNlZCA9IGRhdGEubmFtZTtcblx0XHRcdGZvcihsZXQgZXh0ID0gXCJcIjsgZXh0ICE9PSB1bmRlZmluZWQ7IGV4dCA9IFBBQ0tfRVhURU5TSU9OUy5maW5kKF8gPT4gZGF0YV9uYW1lX3JlZHVjZWQuZW5kc1dpdGgoXykpKVxuXHRcdFx0XHRkYXRhX25hbWVfcmVkdWNlZCA9IGRhdGFfbmFtZV9yZWR1Y2VkLnN1YnN0cigwLCBkYXRhX25hbWVfcmVkdWNlZC5sZW5ndGggLSBleHQubGVuZ3RoKTtcblx0XHRcdGRhdGFfbmFtZV9yZWR1Y2VkID0gcmVwbGFjZV9hbGwoZGF0YV9uYW1lX3JlZHVjZWQsIHRhZ19uYW1lLCBcIlwiKTtcblx0XHRcdGlmKHRhZ19uYW1lLnN0YXJ0c1dpdGgoXCJ2XCIpKVxuXHRcdFx0XHRkYXRhX25hbWVfcmVkdWNlZCA9IHJlcGxhY2VfYWxsKGRhdGFfbmFtZV9yZWR1Y2VkLCB0YWdfbmFtZS5zdWJzdHIoMSksIFwiXCIpO1xuXG5cdFx0XHRsZXQgc2NvcmUgPSAwO1xuXG5cdFx0XHRpZihQTEFURk9STVNfUkVHRVhFU1twbGF0Zm9ybV0uc29tZShfID0+IF8udGVzdChkYXRhX25hbWVfcmVkdWNlZCkpKVxuXHRcdFx0XHRzY29yZSArPSAyO1xuXG5cdFx0XHRpZihwbGF0Zm9ybV9uYW1lX3JlZ2V4LnRlc3QoZGF0YV9uYW1lX3JlZHVjZWQpKVxuXHRcdFx0XHRzY29yZSArPSAxO1xuXG5cdFx0XHRpZighcHJvamVjdF9tYW4gJiYgTUFOVUFMX1JFR0VYLnRlc3QoZGF0YV9uYW1lX3JlZHVjZWQpKVxuXHRcdFx0XHRzY29yZSAtPSAxO1xuXG5cdFx0XHRpZighcHJvamVjdF9kb2MgJiYgRE9DVU1FTlRBVElPTl9SRUdFWC50ZXN0KGRhdGFfbmFtZV9yZWR1Y2VkKSlcblx0XHRcdFx0c2NvcmUgLT0gMTtcblxuXHRcdFx0cmV0dXJuIHtzY29yZSwgZGF0YX07XG5cdFx0fSk7XG5cdH0gZWxzZVxuXHRcdHJldHVybiBbXTtcbn1cblxuLy8vIENoZWNrIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBgYXNzZXRfc3BlY2AgY29uZmlnIHN1Ym9iamVjdCBzcGVjaWZpZXMgYW4gYXNzZXQgZm9yIHRoZSBzcGVjaWZpZWQgcGxhdGZvcm1cbi8vL1xuLy8vIEFyZ3VtZW50czpcbi8vLyAgICogYGNvbmZpZ19hc3NldF9zcGVjYDogYG9iamVjdGAg4oCTIGNvbnRhaW5zIHBsYXRmb3JtIGFzc2V0IHNwZWNpZmllcnMsXG4vLy8gICAqIGBwbGF0Zm9ybWA6IGDiiIggUGxhdGZvcm1gIOKAkyB0aGUgcGxhdGZvcm0gdG8gcmFuayBmb3IuXG4vLy9cbi8vLyBSZXR1cm5zOiBgYm9vbGVhbmAg4oCTIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBzcGVjIGRlZmluZXMgd2hhdCBhc3NldCB0byB1c2Ugb24gdGhlIHNwZWNpZmllZCBwbGF0Zm9ybS5cbmV4cG9ydCBmdW5jdGlvbiBzcGVjaWZpZXNfYXNzZXRzX2Zvcihjb25maWdfYXNzZXRfc3BlYywgcGxhdGZvcm0pIHtcblx0aWYoUGxhdGZvcm0uYWxsLmluZGV4T2YocGxhdGZvcm0pICE9PSAtMSAmJiB0eXBlb2YgY29uZmlnX2Fzc2V0X3NwZWMgPT09IFwib2JqZWN0XCIgJiYgY29uZmlnX2Fzc2V0X3NwZWMgIT09IG51bGwpXG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKGNvbmZpZ19hc3NldF9zcGVjKS5zb21lKF8gPT4gUExBVEZPUk1fTkFNRV9SRUdFWEVTW3BsYXRmb3JtXS50ZXN0KF8pICYmIGNvbmZpZ19hc3NldF9zcGVjW19dICE9PSBudWxsKTtcblx0ZWxzZVxuXHRcdHJldHVybiBmYWxzZTtcbn1cblxuLy8vIENoZWNrIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBgYXNzZXRfc3BlY2AgY29uZmlnIHN1Ym9iamVjdCBzcGVjaWZpZXMgYW4gYXNzZXQgZm9yIHRoZSBzcGVjaWZpZWQgcGxhdGZvcm1cbi8vL1xuLy8vIFRoZSBmaWxlbmFtZXMgaW4gYGNvbmZpZ19hc3NldF9zcGVjYCBhcmUgdGVtcGxhdGFibGU6XG4vLy8gICAqIGFsbCBpbnN0YW5jZXMgb2YgYFwiJHtUQUdfTkFNRX1cImAgYXJlIHJlcGxhY2VkIHdpdGggYHRhZ19uYW1lYCxcbi8vLyAgICogYWxsIGluc3RhbmNlcyBvZiBgXCIke1RBR19OQU1FX1JFRFVDRUR9XCJgIGFyZSByZXBsYWNlZCB3aXRoIGB0YWdfbmFtZWAgd2l0aCBgJ3YnYCBzdHJpcHBlZCBvZmYgdGhlIGZyb250IChpZiBhbnkpLlxuLy8vXG4vLy8gQXJndW1lbnRzOlxuLy8vICAgKiBgY29uZmlnX2Fzc2V0X3NwZWNgOiBgb2JqZWN0YCDigJMgY29udGFpbnMgcGxhdGZvcm0gYXNzZXQgc3BlY2lmaWVycyxcbi8vLyAgICogYHBsYXRmb3JtYDogYOKIiCBQbGF0Zm9ybWAg4oCTIHRoZSBwbGF0Zm9ybSB0byByYW5rIGZvci5cbi8vLyAgICogYGFzc2V0c2A6IGBbb2JqZWN0XWAg4oCTIGFycmF5IG9mIGFzc2V0cyBhY3F1aXJlZCBmcm9tIHRoZSBHaXRIdWIgQVBJLFxuLy8vICAgKiBgdGFnX25hbWVgOiBgc3RyaW5nYCDigJMgdGhlIG5hbWUgb2YgdGhlIGN1cnJlbnQgdGFnLFxuLy8vXG4vLy8gUmV0dXJuczogYG9iamVjdD9gIOKAkyB0aGUgZXh0cmFjdGVkIGFzc2V0IG9iamVjdCwgaWYgYW55LlxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RfYXNzZXRfZm9yKGNvbmZpZ19hc3NldF9zcGVjLCBwbGF0Zm9ybSwgYXNzZXRzLCB0YWdfbmFtZSkge1xuXHRpZih0YWdfbmFtZSAmJiBBcnJheS5pc0FycmF5KGFzc2V0cykgJiYgc3BlY2lmaWVzX2Fzc2V0c19mb3IoY29uZmlnX2Fzc2V0X3NwZWMsIHBsYXRmb3JtKSkge1xuXHRcdGxldCB0ZW1wbGF0ZSA9IE9iamVjdC5rZXlzKGNvbmZpZ19hc3NldF9zcGVjKS5maW5kKF8gPT4gUExBVEZPUk1fTkFNRV9SRUdFWEVTW3BsYXRmb3JtXS50ZXN0KF8pKTtcblx0XHRpZih0ZW1wbGF0ZSA9PT0gbnVsbCB8fCAodGVtcGxhdGUgPSBjb25maWdfYXNzZXRfc3BlY1t0ZW1wbGF0ZV0pID09PSBudWxsKVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRsZXQgdGFnX25hbWVfcmVkdWNlZCA9IHRhZ19uYW1lO1xuXHRcdGlmKHRhZ19uYW1lX3JlZHVjZWQuc3RhcnRzV2l0aChcInZcIikpXG5cdFx0XHR0YWdfbmFtZV9yZWR1Y2VkID0gdGFnX25hbWVfcmVkdWNlZC5zdWJzdHIoMSk7XG5cblx0XHR0ZW1wbGF0ZSA9IHJlcGxhY2VfYWxsKHRlbXBsYXRlLCBcIiR7VEFHX05BTUV9XCIsIHRhZ19uYW1lKTtcblx0XHR0ZW1wbGF0ZSA9IHJlcGxhY2VfYWxsKHRlbXBsYXRlLCBcIiR7VEFHX05BTUVfUkVEVUNFRH1cIiwgdGFnX25hbWVfcmVkdWNlZCk7XG5cblx0XHRyZXR1cm4gYXNzZXRzLmZpbmQoXyA9PiBfLm5hbWUgPT09IHRlbXBsYXRlKSB8fCBudWxsO1xuXHR9IGVsc2Vcblx0XHRyZXR1cm4gbnVsbDtcbn1cbiJdfQ==
