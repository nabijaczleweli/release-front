/*!
 * release-front <https://github.com/nabijaczleweli/release-front>
 * Copyright 2018 nabijaczleweli <https://nabijaczleweli.xyz>
 * Available under MIT license <https://opensource.org/licenses/mit>
 */
(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["exports", "./platform-detect", "./string"], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require("./platform-detect"), require("./string"));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.platformDetect, global.string);
		global.assets = mod.exports;
	}
})(this, function (exports, _platformDetect, _string) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.rank_assets = rank_assets;
	exports.specifies_assets_for = specifies_assets_for;
	exports.extract_asset_for = extract_asset_for;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
		return typeof obj;
	} : function (obj) {
		return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	};

	var PACK_EXTENSIONS = [".tar", ".tgz", ".tgz2", ".tbz2", ".xz", ".zip"];

	var WINDOWS_REGEXES = [/\.exe$/];
	var LINUX_REGEXES = [/\.out$/, /^[^.]+$/];
	var MAC_REGEXES = [/\.dmg$/];

	var MANUAL_REGEX = /man/i;
	var DOCUMENTATION_REGEX = /doc/i;

	var PLATFORMS_REGEXES = {};
	PLATFORMS_REGEXES[_platformDetect.Platform.Windows] = WINDOWS_REGEXES;
	PLATFORMS_REGEXES[_platformDetect.Platform.Linux] = LINUX_REGEXES;
	PLATFORMS_REGEXES[_platformDetect.Platform.Mac] = MAC_REGEXES;

	var PLATFORM_NAME_REGEXES = _platformDetect.Platform.all.map(function (_) {
		return new RegExp(_platformDetect.Platform.name(_), "i");
	});

	function rank_assets(project_name, tag_name, assets, platform) {
		if (_platformDetect.Platform.all.indexOf(platform) !== -1 && Array.isArray(assets) && tag_name && project_name) {
			var project_man = MANUAL_REGEX.test(project_name);
			var project_doc = DOCUMENTATION_REGEX.test(project_name);
			var platform_name = _platformDetect.Platform.name(platform);
			var platform_name_regex = new RegExp(platform_name, "i");

			return assets.map(function (data) {
				var data_name_reduced = data.name;
				for (var ext = ""; ext !== undefined; ext = PACK_EXTENSIONS.find(function (_) {
					return data_name_reduced.endsWith(_);
				})) {
					data_name_reduced = data_name_reduced.substr(0, data_name_reduced.length - ext.length);
				}data_name_reduced = (0, _string.replace_all)(data_name_reduced, tag_name, "");
				if (tag_name.startsWith("v")) data_name_reduced = (0, _string.replace_all)(data_name_reduced, tag_name.substr(1), "");

				var score = 0;

				if (PLATFORMS_REGEXES[platform].some(function (_) {
					return _.test(data_name_reduced);
				})) score += 2;

				if (platform_name_regex.test(data_name_reduced)) score += 1;

				if (!project_man && MANUAL_REGEX.test(data_name_reduced)) score -= 1;

				if (!project_doc && DOCUMENTATION_REGEX.test(data_name_reduced)) score -= 1;

				return { score: score, data: data };
			});
		} else return [];
	}

	function specifies_assets_for(config_asset_spec, platform) {
		if (_platformDetect.Platform.all.indexOf(platform) !== -1 && (typeof config_asset_spec === "undefined" ? "undefined" : _typeof(config_asset_spec)) === "object" && config_asset_spec !== null) return Object.keys(config_asset_spec).some(function (_) {
			return PLATFORM_NAME_REGEXES[platform].test(_) && config_asset_spec[_] !== null;
		});else return false;
	}

	function extract_asset_for(config_asset_spec, platform, assets, tag_name) {
		if (tag_name && Array.isArray(assets) && specifies_assets_for(config_asset_spec, platform)) {
			var template = Object.keys(config_asset_spec).find(function (_) {
				return PLATFORM_NAME_REGEXES[platform].test(_);
			});
			if (template === null || (template = config_asset_spec[template]) === null) return null;

			var tag_name_reduced = tag_name;
			if (tag_name_reduced.startsWith("v")) tag_name_reduced = tag_name_reduced.substr(1);

			template = (0, _string.replace_all)(template, "${TAG_NAME}", tag_name);
			template = (0, _string.replace_all)(template, "${TAG_NAME_REDUCED}", tag_name_reduced);

			return assets.find(function (_) {
				return _.name === template;
			}) || null;
		} else return null;
	}
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
