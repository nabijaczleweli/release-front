(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["exports"], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports);
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports);
		global.url = mod.exports;
	}
})(this, function (exports) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.extract_slug = extract_slug;
	exports.full_name = full_name;
	exports.latest_release = latest_release;


	var EXTRACT_SLUG_REGEX = /^(?:(?:(?:(?:(?:http(?:s)?:)?\/\/)?github\.com\/)?)|\?)([a-zA-Z0-9-_.]+)\/([a-zA-Z0-9-_.]+).*/i;
	var GITHUB_API_ACCEPT = "application/vnd.github.v3+json";

	function extract_slug(data) {
		var sought = EXTRACT_SLUG_REGEX.exec(data) || [];
		sought.shift();

		return {
			name: sought[0] || null,
			repo: sought[1] || null
		};
	}

	function full_name(slug) {
		if (slug && slug.name && slug.repo) return slug.name + "/" + slug.repo;else return null;
	}

	function latest_release(slug, callback) {
		if (callback && slug && slug.name && slug.repo) {
			var url = "//api.github.com/repos/" + slug.name + "/" + slug.repo + "/releases/latest";

			var request = new XMLHttpRequest();
			request.open("GET", url);

			request.setRequestHeader("Accept", GITHUB_API_ACCEPT);
			request.overrideMimeType("application/json");

			request.addEventListener("readystatechange", function () {
				if (request.readyState === XMLHttpRequest.DONE) {
					var response = typeof request.response === "string" ? JSON.parse(request.response) : request.response;
					callback(request.status, response);
				}
			});
			request.send();

			return true;
		} else return false;
	}
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9qcy91cmwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBdUJRLFksR0FBQSxZO1NBQWMsUyxHQUFBLFM7U0FBVyxjLEdBQUEsYzs7O0FBR2pDLEtBQU0scUJBQXFCLGdHQUEzQjtBQUNBLEtBQU0sb0JBQXFCLGdDQUEzQjs7QUFTQSxVQUFTLFlBQVQsQ0FBc0IsSUFBdEIsRUFBNEI7QUFDM0IsTUFBSSxTQUFTLG1CQUFtQixJQUFuQixDQUF3QixJQUF4QixLQUFpQyxFQUE5QztBQUNBLFNBQU8sS0FBUDs7QUFFQSxTQUFPO0FBQ04sU0FBTSxPQUFPLENBQVAsS0FBYSxJQURiO0FBRU4sU0FBTSxPQUFPLENBQVAsS0FBYTtBQUZiLEdBQVA7QUFJQTs7QUFPRCxVQUFTLFNBQVQsQ0FBbUIsSUFBbkIsRUFBeUI7QUFDeEIsTUFBRyxRQUFRLEtBQUssSUFBYixJQUFxQixLQUFLLElBQTdCLEVBQ0MsT0FBVSxLQUFLLElBQWYsU0FBdUIsS0FBSyxJQUE1QixDQURELEtBR0MsT0FBTyxJQUFQO0FBQ0Q7O0FBWUQsVUFBUyxjQUFULENBQXdCLElBQXhCLEVBQThCLFFBQTlCLEVBQXdDO0FBQ3ZDLE1BQUcsWUFBWSxJQUFaLElBQW9CLEtBQUssSUFBekIsSUFBaUMsS0FBSyxJQUF6QyxFQUErQztBQUM5QyxPQUFJLGtDQUFnQyxLQUFLLElBQXJDLFNBQTZDLEtBQUssSUFBbEQscUJBQUo7O0FBRUEsT0FBSSxVQUFVLElBQUksY0FBSixFQUFkO0FBQ0EsV0FBUSxJQUFSLENBQWEsS0FBYixFQUFvQixHQUFwQjs7QUFHQSxXQUFRLGdCQUFSLENBQXlCLFFBQXpCLEVBQW1DLGlCQUFuQztBQUNBLFdBQVEsZ0JBQVIsQ0FBeUIsa0JBQXpCOztBQUVBLFdBQVEsZ0JBQVIsQ0FBeUIsa0JBQXpCLEVBQTZDLFlBQU07QUFDbEQsUUFBRyxRQUFRLFVBQVIsS0FBdUIsZUFBZSxJQUF6QyxFQUErQztBQUU5QyxTQUFJLFdBQVcsT0FBTyxRQUFRLFFBQWYsS0FBNEIsUUFBNUIsR0FBdUMsS0FBSyxLQUFMLENBQVcsUUFBUSxRQUFuQixDQUF2QyxHQUFzRSxRQUFRLFFBQTdGO0FBQ0EsY0FBUyxRQUFRLE1BQWpCLEVBQXlCLFFBQXpCO0FBQ0E7QUFDRCxJQU5EO0FBT0EsV0FBUSxJQUFSOztBQUVBLFVBQU8sSUFBUDtBQUNBLEdBcEJELE1BcUJDLE9BQU8sS0FBUDtBQUNEIiwiZmlsZSI6InN0ZG91dCIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxOCBuYWJpamFjemxld2VsaVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbi8vIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuLy8gU09GVFdBUkUuXG5cblxuZXhwb3J0IHtleHRyYWN0X3NsdWcsIGZ1bGxfbmFtZSwgbGF0ZXN0X3JlbGVhc2V9O1xuXG5cbmNvbnN0IEVYVFJBQ1RfU0xVR19SRUdFWCA9IC9eKD86KD86KD86KD86KD86aHR0cCg/OnMpPzopP1xcL1xcLyk/Z2l0aHViXFwuY29tXFwvKT8pfFxcPykoW2EtekEtWjAtOS1fLl0rKVxcLyhbYS16QS1aMC05LV8uXSspLiovaTtcbmNvbnN0IEdJVEhVQl9BUElfQUNDRVBUICA9IFwiYXBwbGljYXRpb24vdm5kLmdpdGh1Yi52Mytqc29uXCI7XG5cblxuLy8vIEdldCByZXBvc2l0b3J5IHNsdWcgaW5mb3JtYXRpb24gZnJvbSB0aGUgc3VwcGxpZWQgc3RyaW5nIOKAkyBzb21ldGhpbmcgYSB1c2VyIG1pZ2h0IHBhc3RlIGluLCBvciBhbiB1bmZpbHRlcmVkIHF1ZXJ5IHN0cmluZy5cbi8vL1xuLy8vIEFyZ3VtZW50czogYGRhdGFgOiBgc3RyaW5nYCDigJMgd2hlcmVpbiB0aGUgcmVwb3NpdG9yeSBzbHVnIGlzIGNvbnRhaW5lZC5cbi8vL1xuLy8vIFJldHVybnM6IGBvYmplY3RgIOKAkyBge25hbWUsIHJlcG99OiB7c3RyaW5nPywgc3RyaW5nP31gLCB3aGVyZSBib3RoIGBuYW1lYCBhbmQgYHJlcG9gIGFyZSB0aGUgcmVzcGVjdGl2ZSBwYXJ0cyBvZiB0aGUgcmVwb3NpdG9yeSBzbHVnIG9yIGBudWxsYCwgaWYgbm90XG4vLy8gZm91bmQuXG5mdW5jdGlvbiBleHRyYWN0X3NsdWcoZGF0YSkge1xuXHRsZXQgc291Z2h0ID0gRVhUUkFDVF9TTFVHX1JFR0VYLmV4ZWMoZGF0YSkgfHwgW107XG5cdHNvdWdodC5zaGlmdCgpOyAgLy8gRHJvcCB3aG9sZSBzdHJpbmdcblxuXHRyZXR1cm4ge1xuXHRcdG5hbWU6IHNvdWdodFswXSB8fCBudWxsLFxuXHRcdHJlcG86IHNvdWdodFsxXSB8fCBudWxsLFxuXHR9O1xufVxuXG4vLy8gR2V0IHJlcG9zaXRvcnkgc2x1ZyBzdHJpbmcgZnJvbSB0aGUgcmVzcGVjdGl2ZSBvYmplY3QsXG4vLy9cbi8vLyBBcmd1bWVudHM6IGBvYmplY3RgIOKAkyBge25hbWUsIHJlcG99OiB7c3RyaW5nLCBzdHJpbmd9YCwgd2hlcmUgYm90aCBgbmFtZWAgYW5kIGByZXBvYCBhcmUgdGhlIHJlc3BlY3RpdmUgcGFydHMgb2YgdGhlIHJlcG9zaXRvcnkgc2x1Zy5cbi8vL1xuLy8vIFJldHVybnM6IGBzdHJpbmc/YCwgcmVwcmVzZW50aW5nIHRoZSBub3JtYWxpc2VkIGZvcm0gb2YgdGhlIHJlcG8gc2x1Zywgb3IgYG51bGxgLCBpZiBzdXBwbGllZCBvYmplY3Qgd2FzIGludmFsaWQuXG5mdW5jdGlvbiBmdWxsX25hbWUoc2x1Zykge1xuXHRpZihzbHVnICYmIHNsdWcubmFtZSAmJiBzbHVnLnJlcG8pXG5cdFx0cmV0dXJuIGAke3NsdWcubmFtZX0vJHtzbHVnLnJlcG99YDtcblx0ZWxzZVxuXHRcdHJldHVybiBudWxsO1xufVxuXG4vLy8gQWNxdWlyZSB0aGUgbGF0ZXN0IHJlbGVhc2UgZGF0YSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVwb3NpdG9yeS5cbi8vL1xuLy8vIEFyZ3VtZW50czpcbi8vLyAgICogYHNsdWdgIOKAkyBgb2JqZWN0YCDigJMgYHtuYW1lLCByZXBvfToge3N0cmluZywgc3RyaW5nfWAsIHdoZXJlIGJvdGggYG5hbWVgIGFuZCBgcmVwb2AgYXJlIHRoZSByZXNwZWN0aXZlIHBhcnRzIG9mIHRoZSByZXF1ZXN0ZWQgcmVwb3NpdG9yeSBzbHVnLlxuLy8vICAgKiBgY2FsbGJhY2tgIOKAkyBgZnVuY3Rpb24oc3RhdHVzOiBudW1iZXIsIHJlc3BvbnNlOiBvYmplY3QpYCDigJNcbi8vLyAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIHJlcXVlc3QgaXMgZmluaXNoZWQsIHdoZXJlIGBzdGF0dXNgIGlzIHRoZSByZXNwb25zZSBzdGF0dXMgKGAyMDBgL2A0MDRgL2V0Yy4pLFxuLy8vICAgICAgICAgICAgICAgICAgIGFuZCBgcmVzcG9uc2VgIGlzIGFuIG9iamVjdCBpbiB0aGUgZm9ybWF0IHJldHVybmVkIGJ5IHRoZVxuLy8vICAgICAgICAgICAgICAgICAgIFtHaXRIdWIgQVBJIHYzXShodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3JlcG9zL3JlbGVhc2VzLyNnZXQtdGhlLWxhdGVzdC1yZWxlYXNlKS5cbi8vL1xuLy8vIFJldHVybnM6IGBib29sZWFuYCwgcmVwcmVzZW50aW5nIHdoZXRoZXIgdGhlIHJlcXVlc3Qgd2FzIG1hZGUuXG5mdW5jdGlvbiBsYXRlc3RfcmVsZWFzZShzbHVnLCBjYWxsYmFjaykge1xuXHRpZihjYWxsYmFjayAmJiBzbHVnICYmIHNsdWcubmFtZSAmJiBzbHVnLnJlcG8pIHtcblx0XHRsZXQgdXJsID0gYC8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvJHtzbHVnLm5hbWV9LyR7c2x1Zy5yZXBvfS9yZWxlYXNlcy9sYXRlc3RgO1xuXG5cdFx0bGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblx0XHRyZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgdXJsKTtcblx0XHQvLyBVc2luZyBVc2VyLUFnZW50IGZyb20gYnJvd3NlcnMgZG9lc24ndCB3b3JrIGFwcGFyZW50bHkgOnZcblx0XHQvLyByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoXCJVc2VyLUFnZW50XCIsIGByZWxlYXNlLWZyb250L1JFTEVBU0VfRlJPTlRfVkVSU0lPTl9TVFJgKTtcblx0XHRyZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoXCJBY2NlcHRcIiwgR0lUSFVCX0FQSV9BQ0NFUFQpO1xuXHRcdHJlcXVlc3Qub3ZlcnJpZGVNaW1lVHlwZShcImFwcGxpY2F0aW9uL2pzb25cIik7XG5cblx0XHRyZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoXCJyZWFkeXN0YXRlY2hhbmdlXCIsICgpID0+IHtcblx0XHRcdGlmKHJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gWE1MSHR0cFJlcXVlc3QuRE9ORSkge1xuXHRcdFx0XHQvLyBGRiBkb2Vzbid0IHNlZW0gdG8gYXV0by1kZWNvZGUgSlNPTlxuXHRcdFx0XHRsZXQgcmVzcG9uc2UgPSB0eXBlb2YgcmVxdWVzdC5yZXNwb25zZSA9PT0gXCJzdHJpbmdcIiA/IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZSkgOiByZXF1ZXN0LnJlc3BvbnNlO1xuXHRcdFx0XHRjYWxsYmFjayhyZXF1ZXN0LnN0YXR1cywgcmVzcG9uc2UpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJlcXVlc3Quc2VuZCgpO1xuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gZWxzZVxuXHRcdHJldHVybiBmYWxzZTtcbn1cbiJdfQ==
