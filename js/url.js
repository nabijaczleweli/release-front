(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["exports"], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports);
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports);
		global.url = mod.exports;
	}
})(this, function (exports) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.extract_slug = extract_slug;
	exports.full_name = full_name;
	exports.latest_release = latest_release;


	var EXTRACT_SLUG_REGEX = /^(?:(?:(?:(?:(?:http(?:s)?:)?\/\/)?github\.com\/)?)|\?)([a-zA-Z0-9-_.]+)\/([a-zA-Z0-9-_.]+).*/i;
	var GITHUB_API_ACCEPT = "application/vnd.github.v3+json";

	function extract_slug(data) {
		var sought = EXTRACT_SLUG_REGEX.exec(data) || [];
		sought.shift();

		return {
			name: sought[0] || null,
			repo: sought[1] || null
		};
	}

	function full_name(slug) {
		if (slug.name && slug.repo) return slug.name + "/" + slug.repo;else return null;
	}

	function latest_release(slug, callback) {
		if (callback && slug.name && slug.repo) {
			var url = "//api.github.com/repos/" + slug.name + "/" + slug.repo + "/releases/latest";

			var request = new XMLHttpRequest();
			request.open("GET", url);

			request.setRequestHeader("Accept", GITHUB_API_ACCEPT);
			request.overrideMimeType("application/json");

			request.addEventListener("readystatechange", function () {
				if (request.readyState === XMLHttpRequest.DONE) {
					var response = typeof request.response === "string" ? JSON.parse(request.response) : request.response;
					callback(request.status, response);
				}
			});
			request.send();

			return true;
		} else return false;
	}
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9qcy91cmwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBdUJRLFksR0FBQSxZO1NBQWMsUyxHQUFBLFM7U0FBVyxjLEdBQUEsYzs7O0FBR2pDLEtBQU0scUJBQXFCLGdHQUEzQjtBQUNBLEtBQU0sb0JBQXFCLGdDQUEzQjs7QUFTQSxVQUFTLFlBQVQsQ0FBc0IsSUFBdEIsRUFBNEI7QUFDM0IsTUFBSSxTQUFTLG1CQUFtQixJQUFuQixDQUF3QixJQUF4QixLQUFpQyxFQUE5QztBQUNBLFNBQU8sS0FBUDs7QUFFQSxTQUFPO0FBQ04sU0FBTSxPQUFPLENBQVAsS0FBYSxJQURiO0FBRU4sU0FBTSxPQUFPLENBQVAsS0FBYTtBQUZiLEdBQVA7QUFJQTs7QUFPRCxVQUFTLFNBQVQsQ0FBbUIsSUFBbkIsRUFBeUI7QUFDeEIsTUFBRyxLQUFLLElBQUwsSUFBYSxLQUFLLElBQXJCLEVBQ0MsT0FBVSxLQUFLLElBQWYsU0FBdUIsS0FBSyxJQUE1QixDQURELEtBR0MsT0FBTyxJQUFQO0FBQ0Q7O0FBT0QsVUFBUyxjQUFULENBQXdCLElBQXhCLEVBQThCLFFBQTlCLEVBQXdDO0FBQ3ZDLE1BQUcsWUFBWSxLQUFLLElBQWpCLElBQXlCLEtBQUssSUFBakMsRUFBdUM7QUFDdEMsT0FBSSxrQ0FBZ0MsS0FBSyxJQUFyQyxTQUE2QyxLQUFLLElBQWxELHFCQUFKOztBQUVBLE9BQUksVUFBVSxJQUFJLGNBQUosRUFBZDtBQUNBLFdBQVEsSUFBUixDQUFhLEtBQWIsRUFBb0IsR0FBcEI7O0FBR0EsV0FBUSxnQkFBUixDQUF5QixRQUF6QixFQUFtQyxpQkFBbkM7QUFDQSxXQUFRLGdCQUFSLENBQXlCLGtCQUF6Qjs7QUFFQSxXQUFRLGdCQUFSLENBQXlCLGtCQUF6QixFQUE2QyxZQUFNO0FBQ2xELFFBQUcsUUFBUSxVQUFSLEtBQXVCLGVBQWUsSUFBekMsRUFBK0M7QUFFOUMsU0FBSSxXQUFXLE9BQU8sUUFBUSxRQUFmLEtBQTRCLFFBQTVCLEdBQXVDLEtBQUssS0FBTCxDQUFXLFFBQVEsUUFBbkIsQ0FBdkMsR0FBc0UsUUFBUSxRQUE3RjtBQUNBLGNBQVMsUUFBUSxNQUFqQixFQUF5QixRQUF6QjtBQUNBO0FBQ0QsSUFORDtBQU9BLFdBQVEsSUFBUjs7QUFFQSxVQUFPLElBQVA7QUFDQSxHQXBCRCxNQXFCQyxPQUFPLEtBQVA7QUFDRCIsImZpbGUiOiJzdGRvdXQiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTggbmFiaWphY3psZXdlbGlcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbi8vIFNPRlRXQVJFLlxuXG5cbmV4cG9ydCB7ZXh0cmFjdF9zbHVnLCBmdWxsX25hbWUsIGxhdGVzdF9yZWxlYXNlfTtcblxuXG5jb25zdCBFWFRSQUNUX1NMVUdfUkVHRVggPSAvXig/Oig/Oig/Oig/Oig/Omh0dHAoPzpzKT86KT9cXC9cXC8pP2dpdGh1YlxcLmNvbVxcLyk/KXxcXD8pKFthLXpBLVowLTktXy5dKylcXC8oW2EtekEtWjAtOS1fLl0rKS4qL2k7XG5jb25zdCBHSVRIVUJfQVBJX0FDQ0VQVCAgPSBcImFwcGxpY2F0aW9uL3ZuZC5naXRodWIudjMranNvblwiO1xuXG5cbi8vLyBHZXQgcmVwb3NpdG9yeSBzbHVnIGluZm9ybWF0aW9uIGZyb20gdGhlIHN1cHBsaWVkIHN0cmluZyDigJMgc29tZXRoaW5nIGEgdXNlciBtaWdodCBwYXN0ZSBpbiwgb3IgYW4gdW5maWx0ZXJlZCBxdWVyeSBzdHJpbmcuXG4vLy9cbi8vLyBBcmd1bWVudHM6IGBkYXRhYDogYHN0cmluZ2Ag4oCTIHdoZXJlaW4gdGhlIHJlcG9zaXRvcnkgc2x1ZyBpcyBjb250YWluZWQuXG4vLy9cbi8vLyBSZXR1cm5zOiBgb2JqZWN0YCDigJMgYHtuYW1lLCByZXBvfToge3N0cmluZz8sIHN0cmluZz99YCwgd2hlcmUgYm90aCBgbmFtZWAgYW5kIGByZXBvYCBhcmUgdGhlIHJlc3BlY3RpdmUgcGFydHMgb2YgdGhlIHJlcG9zaXRvcnkgc2x1ZyBvciBgbnVsbGAsIGlmIG5vdFxuLy8vIGZvdW5kLlxuZnVuY3Rpb24gZXh0cmFjdF9zbHVnKGRhdGEpIHtcblx0bGV0IHNvdWdodCA9IEVYVFJBQ1RfU0xVR19SRUdFWC5leGVjKGRhdGEpIHx8IFtdO1xuXHRzb3VnaHQuc2hpZnQoKTsgIC8vIERyb3Agd2hvbGUgc3RyaW5nXG5cblx0cmV0dXJuIHtcblx0XHRuYW1lOiBzb3VnaHRbMF0gfHwgbnVsbCxcblx0XHRyZXBvOiBzb3VnaHRbMV0gfHwgbnVsbCxcblx0fTtcbn1cblxuLy8vIEdldCByZXBvc2l0b3J5IHNsdWcgc3RyaW5nIGZyb20gdGhlIHJlc3BlY3RpdmUgb2JqZWN0LFxuLy8vXG4vLy8gQXJndW1lbnRzOiBgb2JqZWN0YCDigJMgYHtuYW1lLCByZXBvfToge3N0cmluZz8sIHN0cmluZz99YCwgd2hlcmUgYm90aCBgbmFtZWAgYW5kIGByZXBvYCBhcmUgdGhlIHJlc3BlY3RpdmUgcGFydHMgb2YgdGhlIHJlcG9zaXRvcnkgc2x1Zy5cbi8vL1xuLy8vIFJldHVybnM6IGBzdHJpbmc/YCwgcmVwcmVzZW50aW5nIHRoZSBub3JtYWxpc2VkIGZvcm0gb2YgdGhlIHJlcG8gc2x1Zywgb3IgYG51bGxgLCBpZiBzdXBwbGllZCBvYmplY3Qgd2FzIGludmFsaWQuXG5mdW5jdGlvbiBmdWxsX25hbWUoc2x1Zykge1xuXHRpZihzbHVnLm5hbWUgJiYgc2x1Zy5yZXBvKVxuXHRcdHJldHVybiBgJHtzbHVnLm5hbWV9LyR7c2x1Zy5yZXBvfWA7XG5cdGVsc2Vcblx0XHRyZXR1cm4gbnVsbDtcbn1cblxuLy8vIEdldCByZXBvc2l0b3J5IHNsdWcgc3RyaW5nIGZyb20gdGhlIHJlc3BlY3RpdmUgb2JqZWN0LFxuLy8vXG4vLy8gQXJndW1lbnRzOiBgb2JqZWN0YCDigJMgYHtuYW1lLCByZXBvfToge3N0cmluZz8sIHN0cmluZz99YCwgd2hlcmUgYm90aCBgbmFtZWAgYW5kIGByZXBvYCBhcmUgdGhlIHJlc3BlY3RpdmUgcGFydHMgb2YgdGhlIHJlcG9zaXRvcnkgc2x1Zy5cbi8vL1xuLy8vIFJldHVybnM6IGBzdHJpbmc/YCwgcmVwcmVzZW50aW5nIHRoZSBub3JtYWxpc2VkIGZvcm0gb2YgdGhlIHJlcG8gc2x1Zywgb3IgYG51bGxgLCBpZiBzdXBwbGllZCBvYmplY3Qgd2FzIGludmFsaWQuXG5mdW5jdGlvbiBsYXRlc3RfcmVsZWFzZShzbHVnLCBjYWxsYmFjaykge1xuXHRpZihjYWxsYmFjayAmJiBzbHVnLm5hbWUgJiYgc2x1Zy5yZXBvKSB7XG5cdFx0bGV0IHVybCA9IGAvL2FwaS5naXRodWIuY29tL3JlcG9zLyR7c2x1Zy5uYW1lfS8ke3NsdWcucmVwb30vcmVsZWFzZXMvbGF0ZXN0YDtcblxuXHRcdGxldCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cdFx0cmVxdWVzdC5vcGVuKFwiR0VUXCIsIHVybCk7XG5cdFx0Ly8gVXNpbmcgVXNlci1BZ2VudCBmcm9tIGJyb3dzZXJzIGRvZXNuJ3Qgd29yayBhcHBhcmVudGx5IDp2XG5cdFx0Ly8gcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKFwiVXNlci1BZ2VudFwiLCBgcmVsZWFzZS1mcm9udC9SRUxFQVNFX0ZST05UX1ZFUlNJT05fU1RSYCk7XG5cdFx0cmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKFwiQWNjZXB0XCIsIEdJVEhVQl9BUElfQUNDRVBUKTtcblx0XHRyZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUoXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXG5cdFx0cmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKFwicmVhZHlzdGF0ZWNoYW5nZVwiLCAoKSA9PiB7XG5cdFx0XHRpZihyZXF1ZXN0LnJlYWR5U3RhdGUgPT09IFhNTEh0dHBSZXF1ZXN0LkRPTkUpIHtcblx0XHRcdFx0Ly8gRkYgZG9lc24ndCBzZWVtIHRvIGF1dG8tZGVjb2RlIEpTT05cblx0XHRcdFx0bGV0IHJlc3BvbnNlID0gdHlwZW9mIHJlcXVlc3QucmVzcG9uc2UgPT09IFwic3RyaW5nXCIgPyBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2UpIDogcmVxdWVzdC5yZXNwb25zZTtcblx0XHRcdFx0Y2FsbGJhY2socmVxdWVzdC5zdGF0dXMsIHJlc3BvbnNlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXF1ZXN0LnNlbmQoKTtcblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGVsc2Vcblx0XHRyZXR1cm4gZmFsc2U7XG59XG5cblxuLy8gVE9ETzogdGVzdHMgZm9yIGJvdHRvbSB0d28gZigpc1xuIl19
